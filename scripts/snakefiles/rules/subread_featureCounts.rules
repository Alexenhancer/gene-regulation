# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "gtf_file" in config["genome"].keys():
    sys.exit("GTF file must be defined in the config file")

if not "genome" in config["dir"].keys():
    sys.exit("Genome directory must be defined in the config file")

if not "base" in config["dir"].keys():
    sys.exit("Dir base must be defined in the config file")

if not "subread-featureCounts" in config.keys():
    config["subread-featureCounts"] = {}

if not "attr_type" in config["subread-featureCounts"].keys():
    config["subread-featureCounts"]["attr_type"] = "gene_id"

if not "feature_type" in config["subread-featureCounts"].keys():
    config["subread-featureCounts"]["feature_type"] = "exon"

if not "multi_mapping" in config["subread-featureCounts"].keys():
    config["subread-featureCounts"]["multi_mapping"] = ""

if not "strand_specificity" in config["subread-featureCounts"].keys():
    config["subread-featureCounts"]["strand_specificity"] = "0"

# Define input files (no global variables allowed?)
def featureCounts_inputs(wildcards):
    SAMPLE_IDS = read_table(config["metadata"]["samples"]).iloc[:,0]
    bam_files =  expand(SAMPLE_DIR + "{samples}/{samples}_{aligner}.bam", samples=SAMPLE_IDS, aligner=wildcards.aligner)
    return bam_files

# Rule
rule subread_featureCounts:
    """featureCounts from the subread toolkit. 

    Required parameters:
        config["qsub"]
        config["dir"]["base"]
        config["dir"]["genome"]
        config["genome"]["gtf_file"]

    Optional parameters:
        config["subread-featureCounts"]["attr_type"]
        config["subread-featureCounts"]["feature_type"]
        config["subread-featureCounts"]["multi_mapping"]
        config["subread-featureCounts"]["strand_specificity"]

    Usage: 
        Usage: featureCounts [options] -a <annotation_file> -o <output_file> input_file1 [input_file2] ... 

    Contributors: 
        Claire Rioualen, Jacques van Helden
    """
    input: 
        bam = "{reads}_sorted_pos.bam",
        gtf = config["dir"]["genome"] + "/" + config["genome"]["gtf_file"]
    output: "{reads}_featureCounts.txt"          #### !!_" + config["subread-featureCounts"]["feature_type"] + "
    params:
        wd = config["dir"]["base"],
        attr_type = config["subread-featureCounts"]["attr_type"], 
        feature_type = config["subread-featureCounts"]["feature_type"], 
        multi_mapping = config["subread-featureCounts"]["multi_mapping"], 
        strand_specificity = config["subread-featureCounts"]["strand_specificity"], 
        qsub = config["qsub"]\
            + " -e {reads}_featureCounts_qsub.err"\
            + " -o {reads}_featureCounts_qsub.out"
    log: "{reads}_featureCounts.log"
    benchmark: "{reads}_featureCounts_benchmark.json"
    run:
        shell("featureCounts -a {input.gtf} -o {output} {input.bam} -g {params.attr_type} -t {params.feature_type} -s {params.strand_specificity} {params.multi_mapping} &> {log}")
        R("""
            setwd("{params.wd}")
            counts <- read.table("{output}", header=TRUE)
            new <- counts[,-which(names(counts) %in% c("Chr", "Start", "End", "Strand", "Length"))]
            write.table(new, file = "{output}", sep="\t", col.names=FALSE, row.names=FALSE)
        """)






