rule edgeR:
    """Run differential expression analysis on a table of counts per tag
    (gene). 

    This rule takes as input a tab-delimited text file containing gene
    counts per sample (one row per gene, one column per sample) and a gene
    annotation file (gtf).

    Result files:

    1. A tab-delimited file with with differential expression
       statistics, sorted by significance (p-value of FDR).
    2. A pdf file with various plots. 

    """
    input: LIST_ALL_COUNTS
    output: config["dir"]["data_root"] + "results/{cond_1}_VS_{cond_2}_bowtie2_mm" + MAX_MISMATCHES + "_sorted_" + ORDER + ".csv"
    log: "results/{cond_1}_VS_{cond_2}_bowtie2_mm" + MAX_MISMATCHES + "_sorted_" + ORDER + ".log"
    benchmark: "results/{cond_1}_VS_{cond_2}_bowtie2_mm" + MAX_MISMATCHES + "_sorted_" + ORDER + ".json"
    params: qsub = config["qsub"] + " -q long -e results/{cond_1}_VS_{cond_2}_bowtie2_mm" + MAX_MISMATCHES + "_sorted_" + ORDER + "_qsub.err -o results/{cond_1}_VS_{cond_2}_bowtie2_mm" + MAX_MISMATCHES + "_sorted_" + ORDER + "_qsub.out", cond1="{cond_1}", cond2="{cond_2}"
    run:
        cond_1 = params.cond1
        cond_2 = params.cond2

        #Get biological replicate list
        R_1 = config["edgeR_parameters"][cond_1]
        R_2 = config["edgeR_parameters"][cond_2]

        ext = "_bowtie2_mm" + MAX_MISMATCHES + "_sorted_" + ORDER + "_count.txt" 

        #Create complete path for count files
        files_list = []
        for elt in R_1:
            files_list.append(config["dir"]["data_root"] + elt + "/" + elt + ext)

        for elt in R_2:
            files_list.append(config["dir"]["data_root"] + elt + "/" + elt + ext)

        #Separate the count files in string
        counts_f = ', '.join(files_list)
        #Get the list of condition 
        xp_condition_py = (cond_1 + ",") * len(R_1) + (cond_2 + ",") * len(R_2)
        #remove the last coma
        xp_condition_py = xp_condition_py[:-1]

        #get list of replicate
        xp_name_py = ",".join(R_1) + "," + ",".join(R_2)

        #list of condition
        xp_list = cond_1 + "," + cond_2

        if len(R_1) >= len(R_2):
            n_rep = len(R_2)
        else:
            n_rep = len(R_1)
        
        #out=open(str(output), 'w')
        #out.write(counts_f + "\n" + xp_condition_py + "\n" + xp_name_py + "\n" + xp_list + "\n" + str(n_rep))                     
        #out.close()
        R("""
        library("edgeR")
        library("limma")
        file_list = c({counts_f})
        xp_name = c({xp_name_py})
        xp_condition = c({xp_condition_py})
        # get data from counts files
        counts = readDGE(file_list)$counts

        # Remove summary lines from HTseq files
        noint = rownames(counts) %in% c("no_feature","ambiguous","too_low_aQual", "not_aligned","alignment_not_unique")
        
        # Remove all features that have less than 1 reads per millions of reads
        cpms = cpm(counts)
        keep = rowSums(cpms > 1) >= {n_rep} & !noint
        counts = counts[keep,]

        #tables preparation
        colnames(counts) = xp_name
        
        d = DGEList(counts=counts, group=xp_condition)
        d = calcNormFactors(d)
        
        pdf(file="{config["dir"]["data_root"]}/results/plotMDS_{cond_1}_VS_{cond_2}.pdf") 
        plotMDS(d, labels=samples$shortname, col=c("darkgreen","blue")[factor(samples$condition)])
        dev.off()
        
        d = estimateCommonDisp(d)
        d = estimateTagwiseDisp(d)
        
        pdf(file="{config["dir"]["data_root"]}/results/plotMeanVar_{cond_1}_VS_{cond_2}.pdf")
        plotMeanVar(d, show.tagwise.vars=TRUE, NBline=TRUE)
        dev.off()

        pdf(file="{config["dir"]["data_root"]}/results/plotBCV_{cond_1}_VS_{cond_2}.pdf")
        plotBCV(d)
        dev.off()

        #Differential expression
        de = exactTest(d, pair=c({xp_list}))

        #tabular summary of the DE stats
        tt = topTags(de, n=nrow(d))

        nc = cpm(d, normalized.lib.sizes=TRUE)
        rn = rownames(tt$table)

        deg = rn[tt$table$FDR < .05]

        pdf(file="{config["dir"]["data_root"]}/results/plotSmear_{cond_1}_VS_{cond_2}.pdf")
        plotSmear(d, de.tags=deg)
        dev.off()

        write.csv(tt$table, file="{output}")
        
        """)


