"""Trim one a paired end raw reads file with sickle.

Required parameters:
    config["qsub"]
Optional parameters:
    config["sickle"]["threshold"]
    config["sickle"]["qual"]

Usage:


Authors:
    Claire Rioualen, Lucie Khamvongsa, Jacques van Helden
"""

# Set defaults params in case they're not defined in config file
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "sickle" in config.keys():
    config["sickle"] = {}

if not "threshold" in config["sickle"].keys():
    config["sickle"]["threshold"] = "20"

if not "qual" in config["sickle"].keys():
    config["sickle"]["qual"] = "sanger"

# Define paths
if not "samples" in config["dir"].keys():
    config["dir"]["samples"] = config["dir"]["results"]

suffix = "sickle-pe-q" + config["sickle"]["threshold"]                          # check consistency with the workflow file


rule sickle_pe:
    input:
        forward = "{reads}_R1.fastq", \
        reverse = "{reads}_R2.fastq"
    output:
        forward = "{reads}_" + suffix + "_R1.fastq", \
        reverse = "{reads}_" + suffix + "_R2.fastq", \
        single = "{reads}_" + suffix + ".fastq"
    params:
        threshold = config["sickle"]["threshold"], \
        qual_type = config["sickle"]["qual"], \
        qsub = config['qsub'] \
            + " -e "+ "{reads}_" + suffix + "_qsub.err" \
            + " -o "+ "{reads}_" + suffix + "_qsub.out"
    log: "{reads}_" + suffix + ".log"
    benchmark: "{reads}_" + suffix + "_benchmark.json"
    shell: "sickle pe --pe-file1 {input.forward} --pe-file2 {input.reverse} --qual-type {params.qual_type} --qual-threshold {params.threshold} --output-pe1 {output.forward} --output-pe2 {output.reverse} --output-single {output.single} 2> {log}"



#"""Trim reads required before alignment using the sickle software.

#"""

#if not "dir" in config.keys():
#    sys.exit('The key ["dir"] must be defined in the JSON file')

#if not "results" in config["dir"].keys():
#    sys.exit('The key ["dir"]["results"] must be defined in the JSON file')

#if not "suffix" in config.keys():
#    sys.exit('The key ["suffix"] must be defined in the JSON file')

#if not "reads_fwd" in config["suffix"].keys():
#    sys.exit('The key ["suffix"]["reads_fwd"] must be defined in the JSON file')

#if not "reads_rev" in config["suffix"].keys():
#    sys.exit('The key ["suffix"]["reads_rev"] must be defined in the JSON file')

#if not "qual_type" in config["sickle"].keys():
#    config["sickle"]["qual_type"] = "sanger"

#if not "threshold" in config["sickle"].keys():
#    config["sickle"]["threshold"] = "20"

#if not "other_options" in config["sickle"].keys():
#    config["sickle"]["other_options"] = ""

#rule sickle_paired_ends:
#    """Trim paired-end reads (fastq.gz format) using sickle.

#    This script requires to specify the following parameters in the
#    snakemake config file.

#      config["sickle"]["qual_type"]
#      config["sickle"]["threshold"]
#      config["sickle"]["other_options"]
#      config["suffix"]["reads_fwd"]
#      config["suffix"]["reads_rev"]
#      config["qsub"]


#    The quality threshold (threshold) and the quality type (qual_type)
#    parameters have to be determined in the config file (json format)
#    linked in the snakefile (workflow). Any other parameters in the
#    other_options will be passed to sickle.

#    The rule produces three output read files in fastq format:
#    
#    forward reads
#    reverse reads
#    single reads: unmatched between the forward and reverse strands.

#    The sickle summary is stored in a separate file.

#    """
#    
#    input:  forward= config["dir"]["results"] + "{reads}" + config["suffix"]["reads_fwd"] + ".fastq", \
#            reverse= config["dir"]["results"] + "{reads}" + config["suffix"]["reads_rev"] + ".fastq"
#    output: forward = config["dir"]["results"] + "{reads}" + config["suffix"]["reads_fwd"] + "_sickle_pe_q" + config["sickle"]["threshold"] + ".fastq", \
#            reverse =  config["dir"]["results"] + "{reads}" + config["suffix"]["reads_rev"] + "_sickle_pe_q" + config["sickle"]["threshold"] + ".fastq", \
#            single =  config["dir"]["results"] + "{reads}_single_sickle_pe_q" + config["sickle"]["threshold"] + ".fastq", \
#            summary =  config["dir"]["results"] + "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_summary.txt"
#    params: threshold = config["sickle"]["threshold"], \
#            qual_type=config["sickle"]["qual_type"], \
#            options = config["sickle"]["other_options"], \
#            qsub = config["qsub"] \
#            + " -e {reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_qsub.err" \
#            + " -o {reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_qsub.out"
#    log: config["dir"]["results"] + "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + ".log"
#    benchmark: config["dir"]["results"] + "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_benchmark.json"
#    message: "Trimming paired-ends raw reads with sickle\n\tInput:\t{input}\n\tOutput:\t{output}\n\tLog:\t{log}"
#    shell: "sickle pe --pe-file1 {input.forward} --pe-file2 {input.reverse} --qual-type {params.qual_type} --qual-threshold {params.threshold} --output-pe1 {output.forward} --output-pe2 {output.reverse} --output-single {output.single} {params.options} > {output.summary} 2> {log}"

#"""
#    Trim reads required before alignement 

#"""

##     input:  rules.rsync.output
##     output: forward =  "{reads}" + config["suffix"]["reads_fwd"] + "_sickle_pe_q" + config["sickle"]["threshold"] + ".fastq", \
##             reverse =   "{reads}" + config["suffix"]["reads_rev"] + "_sickle_pe_q" + config["sickle"]["threshold"] + ".fastq", \
##             single =   "{reads}_single_sickle_pe_q" + config["sickle"]["threshold"] + ".fastq", \
##             summary =   "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_summary.txt"
##     params: threshold = config["sickle"]["threshold"], \
##             qual_type=config["sickle"]["qual_type"], \
##             options = config["sickle"]["other_options"], \
##             qsub = config["qsub"] \
##             + " -e {reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_qsub.err" \
##             + " -o {reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_qsub.out"
##     log:   "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + ".log"
##     benchmark:  "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_benchmark.json"
##     message: "Trimming paired-ends raw reads with sickle\n\tInput:\t{input}\n\tOutput:\t{output}\n\tLog:\t{log}"
##     shell: "sickle pe --pe-file1 {input.forward} --pe-file2 {input.reverse} --qual-type {params.qual_type} --qual-threshold {params.threshold} --output-pe1 {output.forward} --output-pe2 {output.reverse} --output-single {output.single} {params.options} > {output.summary} 2> {log}"

## """
##     Trim reads required before alignement 

## """

