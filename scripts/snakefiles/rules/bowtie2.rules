"""Read mapping for single end data using Bowtie2. 
Requires the indexing to have previously been done (using the
rule bowtie2_index).

Required parameters:
    config["genome"]["version"]
    config["qsub"]
    config["bowtie2"]["max_mismatches"]

Optional parameters:
    config["bowtie2"]["dir"]
    config["bowtie2"]["threads"]

Usage example:
    ALIGNER=["bowtie2"]
    ALIGNMENT=expand(SAMPLE_DIR + "{samples}/{samples}_{aligner}", samples=SAMPLE_IDS, aligner=ALIGNER)             ## todo
    BOWTIE2_INDEX = expand(config["dir"]["genome"] + "{genome}/Bowtie2Index/{genome}.fa.1.bt2", genome=GENOME)     ## todo
    MAPPING = expand("{alignment}.sam", alignment=ALIGNMENT)

Contributors: 
    Claire Rioualen
"""

# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "version" in config["genome"].keys():
    sys.exit("Genome version must be defined in the config file")

if not "genome" in config["dir"].keys():
    sys.exit("Genome dir must be defined in the dir section of the config file")

if not "seq_type" in config["metadata"].keys():
    sys.exit("Sequencing type (single or paired ends) must be defined in the config file")

if config["metadata"]["seq_type"] == "pe" and not "strands" in config["metadata"].keys():
    sys.exit("The param metadata/strands must be defined when analysing paired end data")

if not "bowtie2" in config.keys():
    config["bowtie2"] = {}

if not "threads" in config["bowtie2"].keys():
    config["bowtie2"]["threads"] = "1"

if not "max_mismatches" in config["bowtie2"].keys():
    config["bowtie2"]["max_mismatches"] = "0"

# Define paths
if not "samples" in config["dir"].keys():
    config["dir"]["samples"] = config["dir"]["results"]

genome_version = config["genome"]["version"]
genome_dir = config["dir"]["genome"] + genome_version + "/"
genome_file = genome_dir + genome_version + ".fa"
bowtie2_dir = genome_dir + "bowtie2/"
bowtie2_index = bowtie2_dir + genome_version + ".fa"

seq_type = config["metadata"]["seq_type"]

# Define input files
def bowtie2_inputs(wildcards):
    seq_type = config["metadata"]["seq_type"]
    if (seq_type == "pe"):
        reads = expand("{fastq_dir}{samples}/{samples}_{strand}.fastq", strand=config["metadata"]["strands"].split(), samples=wildcards.samples, fastq_dir=config["dir"]["fastq"])
    elif (seq_type == "se"):
        reads = expand("{fastq_dir}{samples}/{samples}.fastq", samples=wildcards.samples, fastq_dir=config["dir"]["fastq"])
    else:
        sys.exit("Error: invalid sequencing type parameter. Must be 'se' or 'pe'")
    return reads

rule bowtie2:
    input:
        reads = bowtie2_inputs, 
        index = bowtie2_index
    output:
        bam = config["dir"]["samples"] + "{samples}/{samples}_bowtie2.bam"
    params:
        sam = config["dir"]["samples"] + "{samples}/{samples}_bowtie2.sam", 
        max_mismatches = config["bowtie2"]["max_mismatches"], 
        threads = config["bowtie2"]["threads"], 
        qsub = config["qsub"] \
          + " -e " + config["dir"]["samples"] + "{samples}/{samples}_bowtie2_qsub.err" \
          + " -o " + config["dir"]["samples"] + "{samples}/{samples}_bowtie2_qsub.out"
    log: config["dir"]["samples"] + "{samples}/{samples}_bowtie2.log"
    benchmark: config["dir"]["samples"] + "{samples}/{samples}_bowtie2_benchmark.json"
    run:
        if (seq_type == "pe"):
            shell("bowtie2 -x {input.index} -1 " + input.reads[0] + " -2 " + input.reads[1] + " -S {params.sam} --phred33 -N {params.max_mismatches} --threads {params.threads} 2> {log}")
        elif (seq_type == "se"):
            shell("bowtie2 -x {input.index} -U {input.reads} -S {params.sam} --threads {params.threads} --phred33 -N {params.max_mismatches} 2> {log}")
        shell("samtools view -b -S {params.sam} > {output.bam} 2> {log}")
        shell("rm {params.sam}")



