# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "version" in config["genome"].keys():
    sys.exit("Genome version must be defined in the config file")

if not "fasta_file" in config["genome"].keys():
    sys.exit("Fasta file must be defined in the config file")

if not "genome" in config["dir"].keys():
    sys.exit("Genome dir must be defined in the dir section of the config file")

if not "seq_type" in config["metadata"].keys():
    sys.exit("Sequencing type (single or paired ends) must be defined in the config file")

if config["metadata"]["seq_type"] == "pe" and not "strands" in config["metadata"].keys():
    sys.exit("The param metadata/strands must be defined when analysing paired end data")

if not "tophat" in config.keys():
    config["tophat"] = {}

if not "threads" in config["tophat"].keys():
    config["tophat"]["threads"] = "1"

if not "max_mismatches" in config["tophat"].keys():
    config["tophat"]["max_mismatches"] = "2"

# Define paths
if not "fastq" in config["dir"].keys():
    sys.exit("You must define a location for the fastq file.")

genome_version = config["genome"]["version"]
genome_dir = config["dir"]["genome"] + "/"
genome_file = genome_dir + config["genome"]["fasta_file"]
bowtie2_dir = genome_dir + "bowtie2/"
bowtie2_index = bowtie2_dir + genome_version + ".fa"


# Define input files
def tophat_inputs(wildcards):
    seq_type = config["metadata"]["seq_type"]
    if (seq_type == "pe"):
        reads = expand("{fastq_dir}/{samples}/{samples}_{strand}.fastq", strand=config["metadata"]["strands"].split(), samples=wildcards.samples, fastq_dir=config["dir"]["fastq"])
    elif (seq_type == "se"):
        reads = expand("{fastq_dir}/{samples}/{samples}.fastq", samples=wildcards.samples, fastq_dir=config["dir"]["fastq"])
    else:
        sys.exit("Error: invalid sequencing type parameter. Must be 'se' or 'pe'")
    return reads

rule tophat:
    """Read mapping for single end data using Bowtie2. 
    Requires the indexing to have previously been done (using the
    rule bowtie2_index).

    Required parameters:
        config["genome"]["version"]
        config["genome"]["fasta_file"]
        config["qsub"]


    Optional parameters:
        config["tophat"]["max_mismatches"]
        config["tophat"]["threads"]

    Contributors: 
        Claire Rioualen
    """
    input:
        reads = tophat_inputs,
        index = bowtie2_index
    output:
        bam = config["dir"]["samples"] + "/{samples}/{samples}_tophat.bam"
    params:
        outdir = config["dir"]["samples"] + "/{samples}/{samples}_tophat", \
        max_mismatches = config["tophat"]["max_mismatches"], \
        threads = config["tophat"]["threads"], \
        qsub = config["qsub"] \
          + " -e " + config["dir"]["samples"] + "/{samples}/{samples}_tophat_qsub.err" \
          + " -o " + config["dir"]["samples"] + "/{samples}/{samples}_tophat_qsub.out"
    log: config["dir"]["samples"] + "/{samples}/{samples}_tophat.log"
    benchmark: config["dir"]["samples"] + "/{samples}/{samples}_tophat_benchmark.json"
    run:
        if (seq_type == "pe"):
            shell("tophat --num-threads {params.threads} --read-mismatches {params.max_mismatches} --output-dir {params.outdir} {input.index} " + input.reads[0] + " " + input.reads[1] + " 2> {log}")
        elif (seq_type == "se"):
            shell("tophat --num-threads {params.threads} --read-mismatches {params.max_mismatches} --output-dir {params.outdir} {input.index} {input.reads} 2> {log}")
        shell("mv {params.outdir}/accepted_hits.bam {output.bam} 2> {log}")

