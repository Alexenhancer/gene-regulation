# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "reads_source" in config["dir"].keys():
    sys.exit("Source directory containing sra files must be defined in the config file")

if not "strands" in config["metadata"].keys():
    sys.exit("Strands suffixes must be defined in the config file")

# Rule
rule sra_to_fastq_split:
    """Converts SRA files in separate fastq files por paired-end data with SRA toolkit. 

    Required parameters:
        config['qsub']
        config['dir']['reads_source']

    Optional parameters:
        config['fastq_dump']['options']

    Usage example :
        IMPORT = expand(RESULTS_DIR + "{samples}/{samples}.fastq", samples=SAMPLE_IDS) 

    Contributors: 
        Claire Rioualen
    """
    input: datadir = config["dir"]["reads_source"] + "/"
    output:
        forward = "{fastq}/{sample}/{sample}_" + config["metadata"]["strands"].split()[0] + ".fastq", \
        reverse = "{fastq}/{sample}/{sample}_" + config["metadata"]["strands"].split()[1] + ".fastq"
    log: "{fastq}/{sample}/{sample}_sra-conversion.log"
    benchmark: "{fastq}/{sample}/{sample}_sra-conversion_benchmark.json"
    params: 
        forward_strand = config["metadata"]["strands"].split()[0],
        reverse_strand = config["metadata"]["strands"].split()[1],
        qsub = config["qsub"] \
            + " -e {sample}_sra-conversion_qsub.err" \
            + " -o {sample}_sra-conversion_qsub.out"
    shell:"""
(echo "SHELL: $SHELL"
samples={wildcards.sample}
for sam in ${{samples[@]}}
do
    mkdir -p {wildcards.fastq}/$sam
    echo "Reading $sam directory {input.datadir}$sam..."
    files=({input.datadir}$sam/*)
    if [ ${{#files[@]}} -gt 1 ]
    then
        echo "TODO"
#        echo "Case 2+ files : ${{files[@]}}"
#        for f in ${{files[@]}}
#        do
#            base=$(basename $f .sra)
#            echo "$base"
#            echo "Converting $base.sra to $base.fastq..."
#            fastq-dump --outdir {wildcards.fastq}/$sam/ -I --split-files {input.datadir}$sam/$base.sra
#        done
#        echo "Merging ${{#files[@]}} together as $sam.fastq."
#        echo "Cmd: cat ${{files[@]}} > {input.datadir}$sam.fastq"
#        files=({wildcards.fastq}/$sam/*)
#        cat ${{files[@]}} > {wildcards.fastq}/$sam/$sam.fastq
#        rm ${{files[@]}}
    else
        echo "Case 1 file : ${{files[@]}}"
        base=$(basename ${{files[0]}} .sra)
        echo "Converting $base.sra to $base.fastq..."
        echo "fastq-dump --outdir {wildcards.fastq}/$sam -I --split-files {input.datadir}$sam/$base.sra"
        fastq-dump --outdir {wildcards.fastq}/$sam -I --split-files {input.datadir}$sam/$base.sra
        echo "Moving {wildcards.fastq}/$sam/$base"_{params.forward_strand}".fastq and {wildcards.fastq}/$sam/$base"_{params.reverse_strand}".fastq to {wildcards.fastq}/$sam/$sam"_{params.forward_strand}".fastq and {wildcards.fastq}/$sam/$sam"_{params.reverse_strand}".fastq"
        mv  {wildcards.fastq}/$sam/$base"_{params.forward_strand}".fastq {wildcards.fastq}/$sam/$sam"_{params.forward_strand}".fastq
        mv  {wildcards.fastq}/$sam/$base"_{params.reverse_strand}".fastq {wildcards.fastq}/$sam/$sam"_{params.reverse_strand}".fastq
    fi
done
echo "Job done.") &> {log}

"""
