"""
Compute genome coverage from aligned reads. 

"""
rule install_bedgraphtobigwig:
    params: url="http://hgdownload.cse.ucsc.edu/admin/exe/userApps.src.tgz"
    shell: "wget {params.url}"


# # Set defaults params in case they're not defined in config file. 
# if not "genome_coverage" in config.keys():
#     config["genome_coverage"] =  {'intervals': 200}

rule genome_coverate_dz:
    """Compute coverage (reads per position) for each position of a
    genome, from a bam-formatted file with aligned reads.

    BEWARE: this rule is usefull for small genomes (Bacteria, Fungi)
    but would produce a very big file for Metazoan or Plant genomes.

    """
    input: reads="{reads}.bam"
    output: "{reads}_genomecov_dz.txt"
    log:  "{reads}_genomecov_dz.log"
    benchmark:  "{reads}_genomecov_dz_benchmark.json"
    params: qsub = config["qsub"] + " -q long -e {reads}_genomecov_dz_qsub.err -o {reads}_genomecov_dz_qsub.out"
    shell: "bedtools genomecov -strand -dz -ibam {input.reads} " \
        + "  > {output} 2> {log}"



rule genome_coverage_bedgraph:
    """Compute genome coverage from a bam-formatted file with aligned
    reads.  The coverage file is in bedgraph format, which can be
    loaded in the genome viewer IGV.

    """
    input: reads = "{reads}.bam"
    output: bedg = "{reads}_genomecov.bedgraph"
    log:  "{reads}_genomecov_bg.log"
    benchmark:  "{reads}_genomecov_bg_benchmark.json"
    params: qsub = config["qsub"] + " -q long -e {reads}_genomecov_bg_qsub.err -o {reads}_genomecov_bg_qsub.out"
    shell: "bedtools genomecov -bg -ibam {input.reads} > {output.bedg} 2> {log}" 

rule genome_coverage_bedgraph_strands:
    """Compute two strand-specific genome coverage files (with suffixes
    _strand- and _strand+) from a bam-formatted file with aligned
    reads.  The coverage files are in bedgraph format, which can be
    loaded in the genome viewer IGV.

    """
    input: reads = "{reads}.bam"
    output: bedg_plus = "{reads}_genomecov_strand+.bedgraph", \
            bedg_minus = "{reads}_genomecov_strand-.bedgraph"
    log:  "{reads}_genomecov_bg_str.log"
    benchmark:  "{reads}_genomecov_bg_str_benchmark.json"
    params: qsub = config["qsub"] + " -q long -e {reads}_genomecov_bg_str_qsub.err -o {reads}_genomecov_bg_str_qsub.out"
    shell: "bedtools genomecov -bg -strand + -ibam {input.reads} > {output.bedg_plus} 2> {log}" \
        + "; bedtools genomecov -bg -strand - -ibam {input.reads} > {output.bedg_minus} 2>> {log}"

rule bedgraph_to_tdf:
    """Convert bedgraph to TDF format, which is recommended to load
    coverage data in IGV.
    
    The conversion relies on igvtools:
    https://www.broadinstitute.org/software/igv/igvtools

    """
    input: "{coverage}.bedgraph"
    output: "{coverage}.tdf"
    log: "{coverage}_bedgraph_to_tdf.log"
    benchmark: "{coverage}_bedgraph_to_tdf_benchmark.json"
    params: genome=config["genome"]["fasta"], \
            qsub = config["qsub"] + " -q long -e {coverage}_bedgraph_to_tdf_qsub.err -o {coverage}_bedgraph_to_tdf_qsub.out"
    shell: "igvtools totdf {input} {output} {params.genome} 2> {log}"
    

# rule bedgraph_to_bigwig:
# TO BE WRITTEN    

# rule genome_coverage_bgwig:
#     """Compute genome coverage from a bam-formatted file with aligned reads.

#     Parameters:
#     config["genome"]["chromsizes"] File describing chromosome sizes
    
#     """
#     input: reads="{reads}.bam"
#     output: bw="{reads}_genomecov.bw"
#     log:  "{reads}_genomecov.log"
#     benchmark:  "{reads}_genomecov_benchmark.json"
#     params: chrom_sizes = config["genome"]["chromsizes"], \
#             intervals = config["genome_coverage"]["intervals"], \
#             qsub = config["qsub"] + " -q long -e {reads}_genomecov_qsub.err -o {reads}_genomecov_qsub.out"
#     shell: "bedtools genomecov -bg -scale {params.intervals} -ibam {input.reads} " \
#         + " | bedGraphToBigWig  > {output.bw} 2> {log}"


