# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "samples" in config["dir"].keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "author" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "featuresToRemove" in config["DESeq2"].keys():
    config["DESeq2"]["featuresToRemove"] = "NULL"

if not "varInt" in config["DESeq2"].keys():
    config["DESeq2"]["varInt"] = "group"


if not "condRef" in config["DESeq2"].keys():
    config["DESeq2"]["condRef"] = "WT"

#if not "batch" in config["DESeq2"].keys():
#    config["DESeq2"]["batch"] = "NULL"

if not "alpha" in config["DESeq2"].keys():
    config["DESeq2"]["alpha"] = 0.05

if not "pAdjustMethod" in config["DESeq2"].keys():
    config["DESeq2"]["pAdjustMethod"] = "BH"

if not "fitType" in config["DESeq2"].keys():
    config["DESeq2"]["fitType"] = "parametric"

if not "cooksCutoff" in config["DESeq2"].keys():
    config["DESeq2"]["cooksCutoff"] = "TRUE"

if not "independentFiltering" in config["DESeq2"].keys():
    config["DESeq2"]["independentFiltering"] = "TRUE"

if not "typeTrans" in config["DESeq2"].keys():
    config["DESeq2"]["typeTrans"] = "VST"

if not "locfunc" in config["DESeq2"].keys():
    config["DESeq2"]["locfunc"] = "median"

rule sartools_DESeq2:
    """This rule is designed to perform differential expression analysis of RNA-seq data
    with DESeq2, using the R package SARTools (https://github.com/PF2-pasteur-fr/SARTools/). 

    It requires replicated data to run properly.

    Required parameters:
        config["qsub"]
        config["author"]
        config["dir"]["samples"]

    Optional parameters:
        config["DESeq2"]["featuresToRemove"]
        config["DESeq2"]["varInt"]
        config["DESeq2"]["condRef"]
        config["DESeq2"]["alpha"]
        config["DESeq2"]["pAdjustMethod"]
        config["DESeq2"]["fitType"]
        config["DESeq2"]["cooksCutoff"]
        config["DESeq2"]["independentFiltering"]
        config["DESeq2"]["typeTrans"]
        config["DESeq2"]["locfunc"]

    Authors: 
        Claire Rioualen (claire.rioualen@inserm.fr)
    """
    input: 
        targetFile = "{diffexpr_dir}/{file_prefix}_SARTools_targetfile.txt"
    output: "{diffexpr_dir}/DESeq2/{file_prefix}_DESeq2_report.html"
    params:
        wd = "{diffexpr_dir}/DESeq2",
        targetFile = "{file_prefix}_SARTools_targetfile.txt",
        rawDir = config["dir"]["base"] + "/" + config["dir"]["samples"],
        baseDir = config["dir"]["base"],
        projectName = "{file_prefix}_DESeq2",
        author = config["author"],
        featuresToRemove = config["DESeq2"]["featuresToRemove"],
        varInt = config["DESeq2"]["varInt"],
        condRef = config["DESeq2"]["condRef"],
        batch = config["DESeq2"]["batch"],
        alpha = config["DESeq2"]["alpha"],
        pAdjustMethod = config["DESeq2"]["pAdjustMethod"],
        fitType = config["DESeq2"]["fitType"],
        cooksCutoff = config["DESeq2"]["cooksCutoff"],
        independentFiltering = config["DESeq2"]["independentFiltering"],
        typeTrans = config["DESeq2"]["typeTrans"],
        locfunc = config["DESeq2"]["locfunc"],
        qsub = config["qsub"] \
          + " -e " + "{diffexpr_dir}/{file_prefix}_DESeq2_qsub.err" \
          + " -o " + "{diffexpr_dir}/{file_prefix}_DESeq2_qsub.out"
#    log: "{diffexpr_dir}/{file_prefix}_DESeq2.log"
#    benchmark: "{diffexpr_dir}/{file_prefix}_DESeq2_benchmark.json"
    run:
        R("""

        rm(list=ls())

        sink("{log}")

        library(SARTools)

        targetFile <- "{params.targetFile}"
        setwd("{wildcards.diffexpr_dir}")
        new.loc <- paste("DESeq2/", targetFile, sep="")
        file.copy(targetFile, new.loc)

        setwd("DESeq2")

        colors <- c("green", "red", "blue", "pink")

        # setting params

        projectName <- "{params.projectName}"
        author <- "{params.author}"

        rawDir <- "{params.rawDir}"
        featuresToRemove <- "{params.featuresToRemove}"
        varInt <- "{params.varInt}"
        condRef <- "{params.condRef}"
        batch <- {params.batch}
        fitType <- "{params.fitType}"
        cooksCutoff <- {params.cooksCutoff}
        independentFiltering <- {params.independentFiltering}
        typeTrans <- "{params.typeTrans}"
        locfunc <- "{params.locfunc}"
        alpha <- {params.alpha}
        pAdjustMethod <- "{params.pAdjustMethod}"
        workDir <- "{params.wd}"

        # checking parameters
        checkParameters.DESeq2(projectName=projectName,author=author,targetFile=targetFile,
                               rawDir=rawDir,featuresToRemove=featuresToRemove,varInt=varInt,
                               condRef=condRef,batch=batch,fitType=fitType,cooksCutoff=cooksCutoff,
                               independentFiltering=independentFiltering,alpha=alpha,pAdjustMethod=pAdjustMethod,
                               typeTrans=typeTrans,locfunc=locfunc,colors=colors)

        # loading target file
        target <- loadTargetFile(targetFile=targetFile, varInt=varInt, condRef=condRef, batch=batch)

        # loading counts
        counts <- loadCountData(target=target, rawDir=rawDir, featuresToRemove=featuresToRemove)

        # description plots
        majSequences <- descriptionPlots(counts=counts, group=target[,varInt], col=colors)

        # analysis with DESeq2
        out.DESeq2 <- run.DESeq2(counts=counts, target=target, varInt=varInt, batch=batch,
                                 locfunc=locfunc, fitType=fitType, pAdjustMethod=pAdjustMethod,
                                 cooksCutoff=cooksCutoff, independentFiltering=independentFiltering, alpha=alpha)

        # PCA + clustering
        exploreCounts(object=out.DESeq2$dds, group=target[,varInt], typeTrans=typeTrans, col=colors)

        # summary of the analysis (boxplots, dispersions, diag size factors, export table, nDiffTotal, histograms, MA plot)
        summaryResults <- summarizeResults.DESeq2(out.DESeq2, group=target[,varInt], col=colors,
                                                  independentFiltering=independentFiltering,
                                                  cooksCutoff=cooksCutoff, alpha=alpha)

        # save image of the R session
        save.image(file=paste0(projectName, ".RData"))

        # generating HTML report
        writeReport.DESeq2(target=target, counts=counts, out.DESeq2=out.DESeq2, summaryResults=summaryResults,
                           majSequences=majSequences, workDir=workDir, projectName=projectName, author=author,
                           targetFile=targetFile, rawDir=rawDir, featuresToRemove=featuresToRemove, varInt=varInt,
                           condRef=condRef, batch=batch, fitType=fitType, cooksCutoff=cooksCutoff,
                           independentFiltering=independentFiltering, alpha=alpha, pAdjustMethod=pAdjustMethod,
                           typeTrans=typeTrans, locfunc=locfunc, colors=colors)

        setwd("{params.baseDir}")
        sink()
        """)
