"""Assign sequence reads to genomic features with featureCounts
   (subread suite).

   This rule excecutes the counting step of RNA-Seq analysis.

   The program featureCounts requires two files :
   -the Sam or Bam file containing mapping reads
   -the annotation file (GTF or other related formats).

   Counting options can be specified in the yaml configuration file.
   
Author: Jacques van Helden

Example of parameters expected in the yaml file.

  genome:
    fasta: "genome/Glossina_morsitans/Glossina-morsitans-Yale_CONTIGS_GmorY1.fa"
    gtf: "genome/Glossina_morsitans/Glossina-morsitans-Yale_BASEFEATURES_GmorY1.5.gtf"

  subread:
    index: "genome/Glossina_morsitans/subread/Glossina-morsitans-Yale_CONTIGS_GmorY1"
    gtf_attrtype: "gene_id"     ## Attribute to extract from the GTF file
    feature_type: "transcript"  ## Feature type for subread featureCounts
    paired_ends: "TRUE"
    multi_overlaps: "TRUE"


   Reference: Liao Y, Smyth GK and Shi W (2014). featureCounts: an
   efficient general purpose program for assigning sequence reads to
   genomic features.  Bioinformatics, 30(7):923-30.

"""

# Check mandatory parameters (must have been defined in the config file)
if not "subread" in config.keys():
    sys.exit("Subread parameters must be defined in the config file")

if not (("genome" in config.keys()) and ("features_gtf" in config["genome"].keys())):
    sys.exit("The parameter config['genome']['features_gtf'] should be specified in the config file.")

#if not "annotations" in config["subread"].keys():
#    sys.exit('The variable config["subreads"]["annotations"] must be defined in the config file ')

# Set defaults params in case they were not defined in config file. 
if not "feature_type" in config["subread"].keys():
    config["subread"]["feature_type"] = "transcript"

if not "gtf_attrtype" in config["subread"].keys():
    config["subread"]["gtf_attrtype"] = "gene_id"

if not "ignore_dup" in config["subread"].keys():
    config["subread"]["ignore_dup"] = "False"

if not "threads" in config["subread"].keys():
    config["subread"]["threads"] = "1"

if not "strand" in config["subread"].keys():
    config["subread"]["strand"] = "0"

if not "count_options" in config["subread"].keys():
    config["subread"]["count_options"] = ""

# concatenate flag-type options to build featureCounts command
FEATURECOUNTS_FLAGS = "" 

# Count fragments (read pairs) instead of individual reads.
if "paired_ends" in config["subread"].keys():
    if config["subread"]["paired_ends"].lower() == "true":
        FEATURECOUNTS_FLAGS = FEATURECOUNTS_FLAGS + " -p"

# Multi-mapping reads will also be counted (option -M).
if "multi_overlaps" in config["subread"].keys():
    if config["subread"]["multi_overlaps"].lower() == "true":
        FEATURECOUNTS_FLAGS = FEATURECOUNTS_FLAGS + " -M"

rule featurecounts:
    """Count number of reads per genomic feature with featureCounts
    (subread suite).

    Note that for paired-end sequencing the reads should not be sorted
    after read-mapping, because this would separate paired
    reads. FeatureCounts detects this situation and re-sorts the
    reads, so the results would be fine, but the re-sorting takes an
    unnecessary time.

    """
	input: annotation = config["genome"]["features_gtf"], \
            reads="{aligned_reads}.bam"
	output: count_table = "{aligned_reads}_featurecounts.tab"
	params: gtf_attrtype = config["subread"]["gtf_attrtype"], \
            feature_type = config["subread"]["feature_type"], \
            multi_overlaps = config["subread"]["multi_overlaps"], \
            paired_ends = config["subread"]["paired_ends"], \
            ignore_dup = config["subread"]["ignore_dup"], \
            threads = config["subread"]["threads"], \
            flags = FEATURECOUNTS_FLAGS, \
            strand = config["subread"]["strand"], \
            count_options = config["subread"]["count_options"], \
            qsub = config["qsub"] \
                + " -e {aligned_reads}_featurecounts_qsub.err" \
                + " -o {aligned_reads}_featurecounts_qsub.out"
	log: "{aligned_reads}_featurecounts.log"
	benchmark: "{aligned_reads}_featurecounts_benchmark.json"
        shell: "featureCounts -a {input.annotation} -o {output.count_table} -t {params.feature_type} -g {params.gtf_attrtype} -T {params.threads} {params.flags} -s {params.strand} {params.count_options} {input.reads}  2> {log} "



## Requires a tab-delimited file with the paths of count files per sample
if not ("files" in config.keys()) & ("count_file_paths" in config["files"].keys()) :
    sys.exit("The parameter config['files']['count_file_paths'] should be specified in the config file.")

## Summary count table, with one row per gene and one column per sample
if not ("files" in config.keys()) & ("count_table" in config["files"].keys()) :
    sys.exit("The parameter config['files']['count_table'] should be specified in the config file.")

rule merge_featurecounts_tables:
    """Merge a list of tab-delimited files produced by
    featureCounts. These files contain one row per feature (e.g. gene,
    transcript, depending on parameters) and the following columns.

    1. Geneid
    2. Chr
    3. Start
    4. End
    5. Strand
    6. Length
    7. Counts

    The merged table contains the 6 first columns (gene descriptions)
    + one column per input file.

    """    
    input: path_table = config["files"]["count_file_paths"]
    output: count_table = config["files"]["count_table"]
    log: config["files"]["count_table"] + ".log"
    log: config["files"]["count_table"] + "_benchmark.json"
    params: qsub = config["qsub"] \
            + " -e " + config["files"]["count_table"] + "_qsub.err" \
            + " -o " + config["files"]["count_table"] + "_qsub.out"
    run:
        verbosity = int(config["verbosity"])
        if verbosity >= 1:
            print("Generating count table\t{output.count_table}")
        
