# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "version" in config["genome"].keys():
    sys.exit("Genome version must be defined in the config file")

if not "fasta_file" in config["genome"].keys():
    sys.exit("Fasta_file must be defined in the config file")

if not "genome" in config["dir"].keys():
    sys.exit("Genome dir must be defined in the dir section of the config file")

if not "seq_type" in config["metadata"].keys():
    sys.exit("Sequencing type (single or paired ends) must be defined in the config file")

if config["metadata"]["seq_type"] == "pe" and not "strands" in config["metadata"].keys():
    sys.exit("The param metadata/strands must be defined when analysing paired end data")

if not "bwa" in config.keys():
    config["bwa"] = {}

if not "threads" in config["bwa"].keys():
    config["bwa"]["threads"] = "1"

# Define paths
if not "fastq" in config["dir"].keys():
    sys.exit("You must define a location for the fastq file.")

genome_version = config["genome"]["version"]
genome_dir = config["dir"]["genome"] + "/"
genome_file = genome_dir + config["genome"]["fasta_file"]
bwa_dir = genome_dir + "bwa/"
bwa_index = bwa_dir + genome_version + ".fa"

seq_type = config["metadata"]["seq_type"]

# Define input files
def bwa_inputs(wildcards):
    seq_type = config["metadata"]["seq_type"]
    if (seq_type == "pe"):
        reads = expand("{fastq_dir}/{samples}/{prefix}_{strand}.fastq", strand=config["metadata"]["strands"].split(), samples=wildcards.samples, fastq_dir=config["dir"]["fastq"], prefix=wildcards.prefix)
    elif (seq_type == "se"):
        reads = expand("{fastq_dir}/{samples}/{prefix}.fastq", samples=wildcards.samples, fastq_dir=config["dir"]["fastq"], prefix=wildcards.prefix)
    else:
        sys.exit("Error: invalid sequencing type parameter. Must be 'se' or 'pe'")
    return reads

# Rule
rule bwa:
    """Read mapping for single end data using bwa. 
    Requires the indexing to have previously been done (using the
    rule bwa_index).

    Required parameters:
        config["genome"]["version"]
        config["genome"]["fasta_file"]
        config["qsub"]

    Optional parameters:
        config["bwa"]["dir"]
        config["bwa"]["threads"]

    Contributors: 
        Claire Rioualen
    """
    input:
        reads = bwa_inputs, 
        index = bwa_index
    output:
        bam = config["dir"]["samples"] + "/{samples}/{prefix}_bwa.bam"
    params:
#        sai = config["dir"]["samples"] + "/{samples}/{prefix}_bwa.sai", 
        sam = config["dir"]["samples"] + "/{samples}/{prefix}_bwa.sam", 
        threads = config["bwa"]["threads"], 
        qsub = config["qsub"] \
          + " -e " + config["dir"]["samples"] + "/{samples}/{prefix}_bwa_qsub.err" \
          + " -o " + config["dir"]["samples"] + "/{samples}/{prefix}_bwa_qsub.out"
    log: config["dir"]["samples"] + "/{samples}/{prefix}_bwa.log"
    benchmark: config["dir"]["samples"] + "/{samples}/{prefix}_bwa_benchmark.json"
    run:
        if (seq_type == "pe"):
            shell("bwa aln -t {params.threads} {input.index} " + input.reads[0] + " > " + input.reads[0] + ".sai 2> {log}")
            shell("bwa aln -t {params.threads} {input.index} " + input.reads[1] + " > " + input.reads[1] + ".sai 2> {log}")
            shell("bwa sampe {input.index} " + input.reads[0] + ".sai " + input.reads[1] + ".sai " + input.reads[0] + " " + input.reads[1] + " > {params.sam} 2> {log}")
        elif (seq_type == "se"):
            shell("bwa aln -t {params.threads} {input.index} {input.reads} > {input.reads}.sai 2> {log}")
            shell("bwa samse {input.index} {input.reads}.sai {input.reads} > {params.sam} 2> {log}")
        shell("samtools view -b -S {params.sam} > {output.bam} 2> {log}")
        shell("rm {params.sam}")




