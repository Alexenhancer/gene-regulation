# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "version" in config["genome"].keys():
    sys.exit("Genome version must be defined in the config file")

if not "genome" in config["dir"].keys():
    sys.exit("Genome dir must be defined in the 'dir' section of the config file")

if not "fasta_file" in config["genome"].keys():
    sys.exit("Genome dir must be defined in the 'dir' section of the config file")

# Define paths
genome_version = config["genome"]["version"]
genome_dir = config["dir"]["genome"] + "/"
genome_file = genome_dir + config["genome"]["fasta_file"]
subread_dir = genome_dir + "subread-align/"
subread_index = subread_dir + genome_version + ".fa"

# Rule
rule subread_index:
    """Rule for the creation of subread index. Has to be done only once.  The
    output file is used to test whether the index already exists
    when aligning.

    Reference: Liao Y, Smyth GK and Shi W (2013). The Subread aligner:
    fast, accurate and scalable read mapping by seed-and-vote. 
    Nucleic Acids Research, 41(10):e108

    Required parameters:
        config["qsub"]
        config["dir"]["genome"]
        config["genome"]["version"]
        config["genome"]["fasta_file"]
    Optional parameters:

    Contributors: 
        Claire Rioualen, Jacques van Helden
    """
    input: genome_file
    output: subread_index
    params:
        dir = subread_dir, \
        version = genome_version, \
        qsub = config["qsub"] \
          + " -e " + subread_dir + "index_qsub.err" \
          + " -o " + subread_dir + "index_qsub.out"
    log: subread_index + ".log"
    benchmark: subread_index + "_benchmark.json"
    shell: """
(mkdir -p {params.dir}
cp {input} {params.dir}{params.version}.fa
subread-buildindex -o {params.dir}{params.version}  {params.dir}{params.version}.fa) &> {log}
"""
