#"""Align each sample with the R-package subread.

#   To align each sample on the reference genome the R-package subread
#   first needs to build a index with the function builindex(). The
#   alignment is then executed with the function align(), which calls
#   the tool read mapping tool Subread.  

#   Reference: Liao Y, Smyth GK and Shi W (2013). The Subread aligner:
#   fast, accurate and scalable read mapping by seed-and-vote.  Nucleic
#   Acids Research, 41(10):e108

#"""

## Raise an error and exit if a required parameter is missing.
## Set optional params to defaults values in case they're not defined in config file.

#if not "subread" in config.keys():
#    sys.exit("The subread parameters should be specified in the config file.")

#if not (("genome" in config.keys()) and ("fasta" in config["genome"].keys())):
#    sys.exit("The parameter config['genome']['fasta'] should be specified in the config file.")

#if not "index" in config["subread"].keys():
#    sys.exit("The parameter config['subread']['index'] should be specified in the config file.")

#if not "seq_type" in config["subread"].keys():
#    sys.exit("The parameter config['subread']['seq_type'] should be specified in the config file.")


## Defne default parameters if not specified in the config file
#if not "max_mismatches" in config["subread"].keys():
#    config["subread"]["max_mismatches"] = "3"

#if not "threads" in config["subread"].keys():
#    config["subread"]["threads"] = "1"

#if not "align_options" in config["subread"].keys():
#    config["subread"]["align_options"] = ""

#if not "other_options" in config["subread"].keys():
#    config["subread"]["other_options"] = ""


#rule subread_buildindex:
#    """Build an index of the genome, which is required before alignig the
#reads with subread-align.
#"""
#    input: reference_genome = config["genome"]["fasta"]
#    output: files=config["subread"]["index"] + ".files", \
#        benchmark=config["subread"]["index"] + "_buildindex_benchmark.json"
#    params: reference_index = config["subread"]["index"], \
#        qsub = config["qsub"] \
#            + " -e " + config["subread"]["index"] + "_buildindex_qsub.err " \
#            + " -o " + config["subread"]["index"] + "_buildindex_qsub.out"
#    log: config["subread"]["index"] + "_buildindex_log.txt"
#    benchmark: config["subread"]["index"] + "_buildindex_benchmark.json"
#    shell: "subread-buildindex -o {params.reference_index}  {input.reference_genome} &> {log}"


#ruleorder:  subread_align_pe > sam_to_bam

#rule subread_align_pe:
#     """Align paired-end reads onto a reference genome with the
#	tool subread-align.

#        Before running the alignment, an index of the genome sequence
#        has to be built with the tool Rsubread::buildindex.
#"""
#     input: index_files = config["subread"]["index"] + ".files", \
#        reads_1 = config["dir"]["fastq"] + "{reads}" + config["suffix"]["reads_fwd"] + ".fastq", \
#        reads_2 = config["dir"]["fastq"] + "{reads}" + config["suffix"]["reads_rev"] + ".fastq"
#     output: bam = config["dir"]["mapped_reads"] + "{reads}_subread-align_pe.bam", \
#        benchmark = config["dir"]["mapped_reads"] + "{reads}_subread-align_pe_benchmark.json"
#     log: config["dir"]["mapped_reads"] + "{reads}_subread-align_pe.log"
#     benchmark: config["dir"]["mapped_reads"] + "{reads}_subread-align_pe_benchmark.json"
#     params: subread_index = config["subread"]["index"], \
#        seq_type = config["subread"]["seq_type"], \
#        max_mismatches = config["subread"]["max_mismatches"], \
#        threads = config["subread"]["threads"], \
#        qsub=config["qsub"] + " -e " + config["dir"]["mapped_reads"] + "{reads}_bowtie_qsub.err " \
#            + " -o " + config["dir"]["mapped_reads"] + "{reads}_bowtie_qsub.out", \
#        align_options = config["subread"]["align_options"]
#     shell: "subread-align -i {params.subread_index} -r {input.reads_1} -R {input.reads_2} -t {params.seq_type} -T {params.threads} -M {params.max_mismatches} {params.align_options} -o {output.bam} 2> {log}"

#ruleorder:  subread_align_se > sam_to_bam

#rule subread_align_se:
#     """Align single-read reads onto a reference genome with the
#	tool subread-align.

#        Before running the alignment, an index of the genome sequence
#        has to be built with the tool Rsubread::buildindex.
#"""
#     input: index_files = config["subread"]["index"] + ".files", \
#        reads = config["dir"]["fastq"] + "{reads}.fastq"
#     output: bam = config["dir"]["mapped_reads"] + "{reads}_subread-align_se.bam", \
#        benchmark = config["dir"]["mapped_reads"] + "{reads}_subread-align_se_benchmark.json"
#     log: config["dir"]["mapped_reads"] + "{reads}_subread-align_se.log"
#     benchmark: config["dir"]["mapped_reads"] + "{reads}_subread-align_se_benchmark.json"
#     params: subread_index = config["subread"]["index"], \
#        seq_type = config["subread"]["seq_type"], \
#        max_mismatches = config["subread"]["max_mismatches"], \
#        threads = config["subread"]["threads"], \
#        qsub=config["qsub"] + " -e " + config["dir"]["mapped_reads"] + "{reads}_bowtie_qsub.err " \
#            + " -o " + config["dir"]["mapped_reads"] + "{reads}_bowtie_qsub.out", \
#        align_options = config["subread"]["align_options"]
#     shell: "subread-align -i {params.subread_index} -r {input.reads} -t {params.seq_type} -T {params.threads} -M {params.max_mismatches} {params.align_options} -o {output.bam} 2> {log}"

