"""
    =========================
    Definition of SWEMBL rule
    =========================
"""
# input:expand(CHIP_PEAK_DIR + "/{gsm_treatment}_vs_{gsm_control}_swembl_R{swembl_r}/{gsm_treatment}_vs_{gsm_control}_swembl_R{swembl_r}.fasta", \
#     zip, \
#     gsm_treatment = list_treatment_swembl, \
#     gsm_control =  list_control_swembl, \
#     swembl_r = list_swembl_r)

rule swembl:
    """Peak-calling with SWEMBL.
    """
    input:treatment = "{gsm_treatment}/{gsm_treatment}_{aligneur}_sorted_" + config["htseq"]["order"] + ".bed", \
          control =  "{gsm_control}/{gsm_control}_{aligneur}_sorted_" + config["htseq"]["order"] + ".bed"
    params: qsub = config["qsub"] + " -q short -e {gsm_treatment}_vs_{gsm_control}_{aligneur}_swembl_R{swembl_r}/{gsm_treatment}_vs_{gsm_control}_{aligneur}_swembl_R{swembl_r}swembl_qsub.err -o {gsm_treatment}_vs_{gsm_control}_swembl_R{swembl_r}/{gsm_treatment}_vs_{gsm_control}_swembl_R{swembl_r}swembl_qsub.out"
    log: "{gsm_treatment}_vs_{gsm_control}_{aligneur}_swembl_R{swembl_r}/{gsm_treatment}_vs_{gsm_control}_{aligneur}_swembl_R{swembl_r}.log"
    benchmark: "{gsm_treatment}_vs_{gsm_control}_{aligneur}_swembl_R{swembl_r}/{gsm_treatment}_vs_{gsm_control}_{aligneur}_swembl_R{swembl_r}_benchmark.json"
    output: peaks_swembl = "{gsm_treatment}_vs_{gsm_control}_{aligneur}_swembl_R{swembl_r}/{gsm_treatment}_vs_{gsm_control}_{aligneur}_swembl_R{swembl_r}.swembl", \
            peaks_bed = "{gsm_treatment}_vs_{gsm_control}_{aligneur}_swembl_R{swembl_r}/{gsm_treatment}_vs_{gsm_control}_{aligneur}_swembl_R{swembl_r}.bed", \
            peak_len="{gsm_treatment}_vs_{gsm_control}_{aligneur}_swembl_R{swembl_r}/{gsm_treatment}_vs_{gsm_control}_{aligneur}_swembl_R{swembl_r}_peaklen.tab"  
    shell: "SWEMBL -i {input.treatment} -r {input.control} -B -R {wildcards.swembl_r} -o {output.peaks_swembl} 2> {log} ; \
convert-features -from swembl -to bed -i {output.peaks_swembl} -o {output.peaks_bed}; \
sequence-lengths -i {output.peaks_bed} -in_format bed | classfreq -ci 10 -v 1 -o {output.peak_len}"



#rule swembl:
#	"""Peak-calling using SWEMBL algorithm.
#	"""
#	input:
#		chip = RESULTSDIR + "{CHIP}/{CHIP}_{ALIGNER}.bed" , \
#		inp = RESULTSDIR + "{INPUT}/{INPUT}_{ALIGNER}.bed"
#	output:
#		RESULTSDIR + "{CHIP}_vs_{INPUT}/{CHIP}_{ALIGNER}_swembl.bed"
#	shell: "SWEMBL -B -m 10 -f 150 -x 1.5 -i {input.chip} -r {input.inp} -o {output}"
