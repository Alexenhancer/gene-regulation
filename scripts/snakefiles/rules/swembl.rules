"""
    =========================
    Definition of SWEMBL rule
    =========================
"""
# input:expand(CHIP_PEAK_DIR + "/{gsm_treatment}_vs_{gsm_control}_swembl_R{swembl_r}/{gsm_treatment}_vs_{gsm_control}_swembl_R{swembl_r}.fasta", \
#     zip, \
#     gsm_treatment = list_treatment_swembl, \
#     gsm_control =  list_control_swembl, \
#     swembl_r = list_swembl_r)

rule swembl:
    """Peak-calling with SWEMBL.

    Beware: for SWEMBL the peaks MUST be sorted by position. If not,
    SWEMBL runs indefinitely.

    """
    input:treatment = "{result_dir}/{gsm_treatment}/{gsm_treatment}_{some_suffix}_sorted_pos.bed", \
          control =  "{result_dir}/{gsm_control}/{gsm_control}_{some_suffix}_sorted_pos.bed"
    params: qsub = config["qsub"]  \
            + " -e {result_dir}/{gsm_treatment}_vs_{gsm_control}/swembl/{gsm_treatment}_vs_{gsm_control}_{some_suffix}_swembl_R{swembl_r}_qsub.err" \
            + " -o {result_dir}/{gsm_treatment}_vs_{gsm_control}/swembl/{gsm_treatment}_vs_{gsm_control}_{some_suffix}_swembl_R{swembl_r}_qsub.out" 
    log: "{result_dir}/{gsm_treatment}_vs_{gsm_control}/swembl/{gsm_treatment}_vs_{gsm_control}_{some_suffix}_swembl_R{swembl_r}.log"
    benchmark: "{result_dir}/{gsm_treatment}_vs_{gsm_control}/swembl/{gsm_treatment}_vs_{gsm_control}_{some_suffix}_swembl_R{swembl_r}_benchmark.json"
    output: peaks_swembl = "{result_dir}/{gsm_treatment}_vs_{gsm_control}/swembl/{gsm_treatment}_vs_{gsm_control}_{some_suffix}_swembl_R{swembl_r}.swembl", \
            peaks_bed = "{result_dir}/{gsm_treatment}_vs_{gsm_control}/swembl/{gsm_treatment}_vs_{gsm_control}_{some_suffix}_swembl_R{swembl_r}.bed", \
            peak_len="{result_dir}/{gsm_treatment}_vs_{gsm_control}/swembl/{gsm_treatment}_vs_{gsm_control}_{some_suffix}_swembl_R{swembl_r}_peaklen.tab"  
    shell: "(SWEMBL -i {input.treatment} -r {input.control} -B -R {wildcards.swembl_r} -o {output.peaks_swembl}; \
convert-features -from swembl -to bed -i {output.peaks_swembl} -o {output.peaks_bed}; \
sequence-lengths -i {output.peaks_bed} -in_format bed | classfreq -ci 10 -v 1 -o {output.peak_len}) &> {log} "



#rule swembl:
#	"""Peak-calling using SWEMBL algorithm.
#	"""
#	input:
#		chip = config["dir"]["results"] + "{CHIP}/{CHIP}_{ALIGNER}.bed" , \
#		inp = config["dir"]["results"] + "{INPUT}/{INPUT}_{ALIGNER}.bed"
#	output:
#		config["dir"]["results"] + "{CHIP}_vs_{INPUT}/{CHIP}_{ALIGNER}_swembl.bed"
#	shell: "SWEMBL -B -m 10 -f 150 -x 1.5 -i {input.chip} -r {input.inp} -o {output}"
