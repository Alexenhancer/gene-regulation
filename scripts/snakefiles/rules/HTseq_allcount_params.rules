rule HTseq_allcount_params:
    """
        Creates a file containing all count from given HTseq count file, 
        and extracts all useful data into a R_params file for differential expression 
        with edgeR and DESeq2
    """

    input:  COUNT_FILES
    output: R_params = PARAMS_R, \
            all_counts_file = ALL_COUNTS
    # log: "results/{cond_1}_VS_{cond_2}_bowtie2_mm" + config["bowtie2"]["max_mismatches"] + "_sorted_" + config["htseq"]["order"] + ".log"
    # benchmark: "results/{cond_1}_VS_{cond_2}_bowtie2_mm" + config["bowtie2"]["max_mismatches"] + "_sorted_" + config["htseq"]["order"] + ".json"
    params: qsub = config["qsub"] + " -q short", \
            cond1 = config["Diff_Exp"]["cond1"], \
            cond2=config["Diff_Exp"]["cond2"], \
            dir_results = config["dir"]["results"]

    run:
        condition_1 = params.cond1
        condition_2 = params.cond2

        # data_root = params.data_root
        dir_results  = params.dir_results
        gene_ids_ok = True
        header = "gene_id"

        # first_count_f = COUNT_FILES[0]
        
        # to_rm = first_count_f.split("_")[0]
        # ext_count_txt = first_count_f.replace(to_rm, "")
        # ext_tab = ext_count_txt.replace("_count.txt", ".tab")

        
        params_R_file = output.R_params.split("/")[2]

        ext_count_txt = params_R_file.replace("params.R", "count.txt")
        ext_count_txt = "_" + ext_count_txt
        ext_tab = params_R_file.replace("_params.R",".tab")
        ext_tab = "_" + ext_tab

        for count_file in COUNT_FILES:
            count_file = count_file.replace(ext_count_txt, "")
            header += "\t" + count_file.split("/")[-1]
        
        # all_conditions = config["Diff_Exp"][cond_1] + config["Diff_Exp"][cond_2]
        # for count_file in COUNT_FILES:
        #     for cond in all_conditions:
        #         if cond in count_file:
        #             header += "\t" + cond
            
        
        list_line = []

        #Creating a count file with all replicates of all conditions
        for i in range(len(COUNT_FILES)):
            count_res = open(COUNT_FILES[i])
            #Check if gene_ids already exist 
            if gene_ids_ok:
                for line in count_res:
                    gene_counts_ids = line.split("\t")
                    list_line.append(gene_counts_ids[0] + "\t" + gene_counts_ids[1].strip("\n"))
                gene_ids_ok = False

            #If gene_ids already exist add count column
            list_file = count_res.readlines()
            for j in range(len(list_file)):
                gene_counts = list_file[j].split("\t")
                list_line[j] += "\t" + gene_counts[1].strip("\n")
            count_res.close()

        #Open and write in a file
        all_counts = open(output.all_counts_file, 'w')
        all_counts.write(header + "\n")
        for elm in list_line:
            all_counts.write(elm + "\n")
        all_counts.close()


        # Initializing variables

        counts_f = []
        sample_condition_py = []
        sample_names_py = []
        conditions = []
        n_rep = []
        output_list = []

        #Get all parameters for all comparisons
        for i in range(len(condition_1)):

            cond_1 = condition_1[i]
            cond_2 = condition_2[i]
            output_list.append(dir_results + "DEG/" + cond_1 + "_vs_" + cond_2 + "/" + cond_1 + "_VS_" + cond_2 + ext_tab)
            

            #Get biological replicate list
            R_1 = config["Diff_Exp"][cond_1]
            R_2 = config["Diff_Exp"][cond_2]


            #Create complete path for count files
            files_list = []
            for elt in R_1:
                files_list.append('"' + config["dir"]["results"] + elt + "/" + elt + ext_count_txt + '"')

            for elt in R_2:
                files_list.append('"' + config["dir"]["results"] + elt + "/" + elt + ext_count_txt + '"')

            #Separate the count files in string
            counts_f.append("c(" + ', \n '.join(files_list) + ")")
            #Get the list of condition 
            sample_condition_temp = ("'" + cond_1 + "',") * len(R_1) + ("'" +cond_2 + "',") * len(R_2)
            #remove the last coma
            sample_condition_py.append("c(" +  sample_condition_temp[:-1] + ")")

            #get list of replicate
            sample_names_py.append("c('" + "','".join(R_1) + "','" + "','".join(R_2) + "')")

            #list of condition
            conditions.append("c('" + cond_1 + "','" + cond_2 + "')")

            if len(R_1) >= len(R_2):
                n_rep.append(str(len(R_2)))
            else:
                n_rep.append(str(len(R_1)))
        
        out_R=open(output.R_params, 'w')
        out_R.write("## Root path \n" \
        + "data.root <-'" +  config["dir"]["results"] + "' \n \n" \
        + "## Table containing the counts of reads per gene (rows) for each sample (columns)  \n" \
        + "all.counts.table <- '" + output.all_counts_file + "' \n \n" \
        + "## Description of the conditions \n" \
        + "conditions <- c('" + "','".join(config["Diff_Exp"]["conditions"]) + "') \n" \
        + "n.rep <-c(" + ','.join(n_rep) + ")\n \n" \
        + "count.files <-c('" + "', \n '".join(COUNT_FILES) + "') \n \n"\
        + "FDR.threshold <- " + config["edgeR"]["FDR_threshold"] + "\n \n \n"\
        + "################################################################ \n" \
        + "## Structure of the comparisons for edgeR \n \n" \
        + "comparisons <-list(" + ','.join(conditions) + ")\n" \
        + "comparisons.cond1 <-list('" + "','".join(condition_1) + "') \n" \
        + "comparsions.cond2 <-list('" + "','".join(condition_2) + "') \n" \
        + "counts.files.per.comparisons <- list(" + ', \n'.join(counts_f) + ")\n" \
        + "condition.per.comparisons <-list(" + ', \n '.join(sample_condition_py) + ")\n" \
        + "names.per.comparisons <-list(" +  ', \n '.join(sample_names_py) + ")\n \n" \
        + "## List of cvs files that will be created by edgeR \n" \
        + "output <-c('" + "', \n '".join(output_list) + "') \n \n" \
        + "#### END OF THE CONFIG FILE \n" \
        + "################################################################" \
        )     
        out_R.close()