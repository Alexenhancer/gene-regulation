import pandas as pd

def merge_count_files(count_files:list, sample_ids:list):
    """Read a list of tab-delimited files containing counts per genes
    (column 1 = gene ID, column 2 = read counts) and merge all counts
    in a single data frame (one row per gene, one column per
    sample).

    The sample-wise gene count tables are loaded and merged using
    python pandas library, which enables to handle data frames. The
    result is an object of class panda.Dataframe.

    """

    ## Instantiate an empty data frame to merge the counts for
    ## each sample (one column per sample, one row per gene).
    count_table = pd.DataFrame()

    # Parse a count files of all replicates of all conditions
    for i in range(len(count_files)):
        count_file = count_files[i]
        sample_id = sample_ids[i]

        if verbosity >= 3:
            print("\t".join(["\tReading counts", str(i), sample_id, count_file]))

        ## Read the count table for the current sample
        sample_counts = pd.read_csv(count_file, sep="\t", names=[sample_id],  index_col=0)

        ## Add a column with current sample to the count table
        count_table = pd.concat([count_table, sample_counts], axis=1)
            
    return(count_table)

rule HTseq_allcount_params:
    """Create a tab-delimited file regrouping the counts of reads per gene
    for all the samples, by collecting the sample-specific counts
    generated by htseq-count.

    This rule also creates a file with the parameters that will be
    passed to R for the detection of differentially expressed genes
    (currently working with rules edgeR and DESeq2).

    The input is a list of count files, such as those produced by
    htseq-count: the first column indicates gene IDs, the second
    column the read counts.

    """

    input: COUNT_FILES
    output: R_params = PARAMS_R, \
            all_counts_file = ALL_COUNTS
    log: config["dir"]["results"] + "/DEG/all_count.log"
    benchmark: config["dir"]["results"] + "/DEG/all_count_benchmark.json"
    params: qsub = config["qsub"] + " -q short -e " + config["dir"]["results"] + "/DEG/all_count_qsub.err -o " + config["dir"]["results"] + "/DEG/all_count_qsub.out", \
#            dir_results = config["dir"]["results"], \
            sample_desc_file = config["files"]["samples"], \
            design_file = config["files"]["analyses"], \
            suffix_deg = config["suffix"]["deg"]
    run:
        verbosity = int(config["verbosity"])
        if verbosity >= 2:
            print("HTseq_allcount_params" + "\tReading sample descriptions")
        
        ################################################################
        ## Read the sample description file (one row per sample, one
        ## column per attribute).
        sample_descr = read_table(params.sample_desc_file, verbosity=verbosity)
        sample_ids = sample_descr.iloc[:,0] ## First column MUST contain sample IDs
        sample_conditions = sample_descr.iloc[:,1] ## Second column MUST contain condition for each sample

        ################################################################
        ## Read the design file (one row per comparison, first column
        ## indicates the first condition, second column the second
        ## condition.
        design = read_table(params.design_file, verbosity=verbosity)
        condition_1 = DESIGN.iloc[:,0] ## First column MUST contain the first condition for each analysis
        condition_2 = DESIGN.iloc[:,1] ## Second column MUST contain the second condition for each analysis
        if (verbosity >= 1):
            print("Analysis design:\t" + config["files"]["analyses"])
            if (verbosity >= 2):
                print("\tCondition 1:\t" + ";".join(condition_1))
                print("\tCondition 2:\t" + ";".join(condition_2))

        ################################################################
        ## Generate a count table with one row per gene and one column
        ## per sample.
        if verbosity >= 2:
            print("Generating count table\t" + output.all_counts_file)

 
        ################################################################
        # Get extention of count files by splitting the first file of
        # the list. Note that this assumes that all count files have
        # the same extension.
        #
        first_file_basename = os.path.basename(COUNT_FILES[0])
        count_ext = os.path.splitext(first_file_basename)[1]
        count_table = merge_count_files(COUNT_FILES, sample_ids=sample_ids)

        ## Export the count table in tab-delimited text file, with a
        ## column header (sample IDs) and row names (gene IDs).
        count_table.to_csv(output.all_counts_file, sep="\t", 
                           header=True, index=True, index_label="gene_id")

        ## For debugging
        if verbosity >= 4:
            print("sample_ids" + "\t" + ";".join(sample_ids))
            print("count_ext" + "\t" + count_ext)
            if verbosity >= 10:
                print("count_table\t" + str(count_table.head()))

        if verbosity >= 3:
            print("Exported count table\t" + output.all_counts_file)

        ################################################################
        ## Exporting parameters for differential analysis with R
        if verbosity >= 2:
            print("Exporting R parameters\t" + output.R_params)

        # Iterate over the analyses. One analysis consists in
        # detecting differentially expressed genes between two
        # conditions. This function exports the parameters for one or
        # several analyses. 
        for i in range(len(condition_1)):
            cond_1 = condition_1[i] # First condition for current analysis
            cond_2 = condition_2[i] # Second condition for current analysis
            if verbosity >= 2:
                print(cond_1 + "\tversus\t" + cond_2)

            # Get the respective lists R_1, R_2 with the sample IDs
            # for the two selected conditions (there should be several
            # samples per condition).
            R_1 = list(sample_ids[sample_conditions == cond_1])
            R_2 = list(sample_ids[sample_conditions == cond_2])

            if verbosity >= 2:
                print("\t" + cond_1 + "\t" + ";".join(R_1))
                print("\t" + cond_2 + "\t" + ";".join(R_2))

        # Write the R configuration file
        out_R=open(output.R_params, 'w')

        out_R.write("################################################################\n" \
                    + "## Configuration file for differential expression analysis with R\n\n")

        out_R.write("## Directories\n" \
                    + "dir.main <-'" +  config["dir"]["base"] + "'\n" \
                    + "dir.results <-'" +  config["dir"]["results"] + "'\n" \
                    + "dir.DEG <-'" +  config["dir"]["DEG"] + "'\n" \
                    + "\n")

        out_R.write("## Suffixes\n" \
                    + "suffix.deg <- '" + config["suffix"]["deg"] + "'\n" \
                    + "suffix.edgeR <- '" + config["suffix"]["edgeR"] + "'\n" \
                    + "suffix.DESeq2 <- '" + config["suffix"]["DESeq2"] + "'\n" \
                    + "\n")

        out_R.write("## Sample description file\n" \
                    + "sample.description.file <-'" +  config["files"]["samples"] + "'\n\n")

        out_R.write("## Design file (analyses)\n" \
                    + "design.file <-'" +  config["files"]["analyses"] + "'\n\n")

        out_R.write("## Table containing the counts of reads per gene (rows) for each sample (columns) \n" \
                    + "all.counts.table <- '" + output.all_counts_file + "'\n\n")

        out_R.write("## Upper threshold on False Discovery Rate (FDR)\n" \
                    + "FDR.threshold <- " + config["edgeR"]["FDR_threshold"] + "\n\n")

        out_R.write("## Upper threshold on the expected number of false positives (e.value)\n" \
                    + "Evalue.threshold <- " + config["edgeR"]["Evalue_threshold"] + "\n\n")

        out_R.write("#### END OF THE CONFIG FILE\n" \
                    + "################################################################" \
                )     
        out_R.close()
