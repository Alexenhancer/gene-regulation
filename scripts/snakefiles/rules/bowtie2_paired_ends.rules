ruleorder:  bowtie2_paired_end_trimmed > bowtie2_paired_end

#TODO: add # mismatches param

# Raise an error and exit if a required parameter is missing.
# Set optional params to defaults values in case they're not defined in config file.

if not "bowtie2" in config.keys():
    sys.exit("The bowtie2 parameters should be specified in the config file.")

if not "index" in config["bowtie2"].keys():
    sys.exit("The parameter config['bowtie2']['index'] should be specified in the config file.")

if not "threads" in config["bowtie2"].keys():
    config["bowtie2"]["threads"] = "1"

if not "max_mismatches" in config["bowtie2"].keys():
    config["bowtie2"]["max_mismatches"] = "0"

if not "dir" in config.keys():
    sys.exit("The 'dir' parameters (directoryies) should be specified in the config file.")

if not "fastq" in config["dir"].keys():
    sys.exit("The parameter config['dir']['fastq'] should be specified in the config file.")

if not "sam" in config["dir"].keys():
    sys.exit("The parameter config['dir']['sam'] should be specified in the config file.")

print("\n\t".join(["DEBUG",
                   config["dir"]["fastq"],
                   config["dir"]["sam"]
                   ]))

rule bowtie2_paired_end:
    """Read mapping for paired end data using bowtie2.

    Requires the indexing to have previously been done (can be done with
    bowtie_build.rules).

    Required parameters:
        config["bowtie"]["index"]
        config["qsub"]

    Optional parameters:
        config["bowtie2"]["threads"]
        config["bowtie2"]["max_mismatches"]

    Usage example:
        MAPPING = expand(RESULTS_DIR + "{alignment}.sam", alignment=ALIGNMENT)

    Contributors:
        Claire Rioualen and Jacques van Helden
"""
    
    input:  \
            index = config["bowtie2"]["index"] + ".1.bt2", \
            forward = config["dir"]["fastq"] + "{reads}" + config["suffix"]["reads_fwd"] + ".fastq", \
            reverse = config["dir"]["fastq"] + "{reads}" + config["suffix"]["reads_rev"] + ".fastq"
    output: sam = config["dir"]["sam"] + "{reads}_bowtie2_pe.sam", \
            summary = config["dir"]["sam"] + "{reads}_bowtie2_pe_summary.txt"
    log: config["dir"]["sam"] + "{reads}_bowtie2_pe.log"
    benchmark: config["dir"]["sam"] + "{reads}_bowtie2_pe_benchmark.json"
    params: max_mismatches = config["bowtie2"]["max_mismatches"], \
            # index = config["dir"]["genome"] + config["genome"]["organism"], \
            qsub=config["qsub"] + " -q long -e " + config["dir"]["sam"] + " {reads}_bowtie_qsub.err " \
                 + " -o " + config["dir"]["sam"] + " {reads}_bowtie_qsub.out", \
            options = config["bowtie2"]["other_options"]
    shell: "bowtie2 -x {input.index} -1 {input.forward} -2 {input.reverse} -S {output.sam} --phred33 -N {params.max_mismatches} -t {params.options} > {output.summary} 2> {log}"


################################################################
## Note by JvH (AUgust 4, 2015): I renamed the previous rule from
## bowtie2_paired_end to bowtie2_paired_end_trimmed, because this rule
## was requiring the trimmed suffix to work. I wrote a more general
## rule bowtie2_paired_end, which only requires to have a file with
## forward and another one with reverse reads, without any assumption
## about the particular suffix after the orientation suffix. In
## principle the rule bowtie2_paired_end_trimmed shoudl not be require
## anymore. After hacing checked this with the other workflows, we
## should suppress it.
################################################################
rule bowtie2_paired_end_trimmed:
    """Read mapping for trimmed reads of a paired-end sample, using bowtie version 2.

    Warning: This rule works on reads trimmed by quality score.  To
    identify the fastq file which are trimmed and work without
    ambiguity, you have to name your trimmed files:

    - '{data_dir}_1_trimmed.fastq.gz' and '{data_dir}_2_trimmed.fastq.gz' for paired-end reads
    - '{data_dir}/{data_dir}_trimmed.fastq.gz' for unpaired reads

    The following parameters should be defined in the configuration file: 
    -max_mismatches
    -bowtie_index

    """
    
    input:  index = config["bowtie2"]["index"], \
            forward = "{reads}" + config["suffix"]["reads_fwd"] + "_sickle_pe_q" + config["sickle"]["threshold"] + ".fastq", \
            reverse = "{reads}" + config["suffix"]["reads_rev"] + "_sickle_pe_q" + config["sickle"]["threshold"] + ".fastq" 
    output: sam = "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_bowtie2_pe.sam", \
            summary = "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_bowtie2_pe_summary.txt"
    log: "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_bowtie2_pe.log"
    benchmark: "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_bowtie2_pe_benchmark.json"
    params: max_mismatches = config["bowtie2"]["max_mismatches"], \
            index = config["bowtie2"]["index"], \
            qsub=config["qsub"] + " -q long -e {reads}_bowtie_qsub.err -o {reads}_bowtie_qsub.out", \
            options = config["bowtie2"]["other_options"]
    shell: "bowtie2 -x {params.index} -1 {input.forward} -2 {input.reverse} -S {output.sam} --phred33 -N {params.max_mismatches} -t {params.options} > {output.summary} 2> {log}"
 
    
