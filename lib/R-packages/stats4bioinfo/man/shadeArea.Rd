% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/util.R
\name{shadeArea}
\alias{shadeArea}
\title{Shade the area below a function, between two limits.
#
#}
\source{
http://stackoverflow.com/questions/6786982/shaded-area-under-two-curves-using-r
#
#
}
\usage{
shadeArea(fun, xlim, shade.from = xlim[1], shade.to = xlim[2],
  length = 1000, curve.col = "blue", shade.col = "gray",
  shade.border = NA, draw.curve = TRUE, add = FALSE, ...)
}
\arguments{
\item{fun}{function
#}

\item{xlim}{min and max X value to plot the curve}

\item{shade.border}{Border color. By default the border is not drawed (NA), to let the initial curve unchanged.}

\item{draw.curve}{= TRUE If FALSE, only plot the shaded area}

\item{...}{Additional parameters are passed to polygon
#
#}

\item{from}{min X value for the shaded area
#}

\item{to}{max X value for the shaded area
#}

\item{length=100}{number of points for the polygon
#}

\item{col="gray"}{Shading color, passed to polygon()
#}

\item{border}{Border color. By default the border is not drawed (NA), to let the initial curve unchanged.
#}

\item{fun}{function}

\item{shade.from=xlim[1]}{min X value for the shaded area}

\item{shade.to=xlim[2]}{max X value for the shaded area}

\item{length=1000}{number of points for the polygon}

\item{shade.col="gray"}{Shading color, passed to polygon()}

\item{add=FALSE}{Add the shaded area to existing plot}

\item{...}{Additional parameters are passed to fun via lapply}
}
\description{
Sades the area under a curve, by plotting a filled polygon.
#
#
}
\details{
#

#Imported from an answer by Amalhelu on stackoverflow.
#
#
}
\examples{
#
### Shade the tails of a Normal distribution
#y <- function(x)sapply(x, function(xt)dnorm(xt,mean=2,sd=2))
#curve(y,from=-6,to=10, n=1000, col="darkblue")
#shadeUnderCurve(y,from=6, to=10, length=100, col="#DDBBFF", border="red")
#
### A more complex example from Amalhelu
### Define two gaussian functions with different means and standard deviations
#y1 <- function(x)sapply(x, function(xt)dnorm(xt,mean=0,sd=1))
#y2 <- function(x)sapply(x, function(xt)dnorm(xt,mean=3,sd=2))
#
### Define a function below both curves
#my.fun <- function(x){sapply(x, function(xt)min(y1(xt), y2(xt)))}
#
### Plot the curves + area under the minimum.
### Note that we first shade the area, and then plot the curve to fix some overlap due to bitmap resolution
#plot(y1, -10, 10, col="darkred", type="n")
#shadeUnderCurve(my.fun, -10, 10, length=1000, col="#DDBBFF")
#curve(y2, add=TRUE, col="darkblue")
#curve(y1, add=TRUE, col="darkred")
#
#
}
\author{
Amalhelu
#
#

Jacques van Helden (\email{Jacques.van-Helden@univ-amu.fr})
}

