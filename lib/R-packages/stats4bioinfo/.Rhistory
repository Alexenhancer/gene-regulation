resampled.fdr <- data.frame(matrix(NA, nrow=nrow(x), ncol=iterations)); row.names(resampled.fdr) <- row.names(x)
resampled.t.obs <- data.frame(matrix(NA, nrow=nrow(x), ncol=iterations)); row.names(resampled.t.obs) <- row.names(x)
resampled.effect.size <- data.frame(matrix(NA, nrow=nrow(x), ncol=iterations)); row.names(resampled.effect.size) <- row.names(x)
i <- 1
verbose(paste(sep="", "Bootstrap iteration: ", i, "/", iterations), 1)
resampled.classes <- sampleClasses(cl, subset.sizes=subset.sizes, replace=replace)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.bootstrap.R', echo=TRUE)
resampled.classes <- sampleClasses(cl, subset.sizes=subset.sizes, replace=replace)
resampled.classes
cl
## Determine subset sizes
if (is.null(subset.sizes)) {
## If no subset size is specified, use sample sizes as resampling sizes
## (supposed to be used with replace=TRUE, to follow the classical bootstrap procedure).
subset.table <- table(cl)
subset.sizes <- as.vector(subset.table)
subset.names <- names(subset.table)
names(subset.sizes) <- subset.names
} else {
## Check that subset sizes have names corresponding to sample labels
if ((is.null(names(subset.sizes)))
| (sum(!(names(subset.sizes) %in% unique(cl))) > 0)) {
stop("Function sampleClasses(): subset.sizes must be vector, with entry names corresponding to class labels")
}
subset.names <- names(subset.sizes)
}
subset.table <- table(cl)
subset.table
subset.sizes <- as.vector(subset.table)
subset.names <- names(subset.table)
names(subset.sizes) <- subset.names
resampled.classes
table(resampled.classes)
hist(table(resampled.classes))
hist(table(resampled.classes), breaks=0:max(table(resampled.classes)))
hist(table(resampled.classes), breaks=-0.5:(max(table(resampled.classes))+0.5)
)
hist(table(resampled.classes), breaks=0:(max(table(resampled.classes)))
)
hist(table(resampled.classes), breaks=0:(max(table(resampled.classes))))
resampled.classes
names(resampled.classes)
hist(table(resampled.classes), breaks=0:(max(table(resampled.classes)))) ## Number of repetitions per sample
table(names(resampled.classes))
table(names(cl))
table(cl)
cl
resampled.classes
names(resampled.classes)
sample.ttpr <- tTestPerRow(x = x[,resampled.classes], cl = names(resampled.classes), m2.minus.m1=m2.minus.m1, ...)
sample.ttpr <- tTestPerRow(x = x[,resampled.classes], cl = names(resampled.classes), m2.minus.m1=m2.minus.m1
)
sample.ttpr$table$means.diff
sample.ttpr$table
sample.ttpr$table[g,]
resampled.effect.size[g,]
resampled.effect.size
sample.ttpr <- tTestPerRow(x = x[,resampled.classes], cl = names(resampled.classes), m2.minus.m1=m2.minus.m1, ...)
resampled.p.value[,i] <- sample.ttpr$table$p.value
resampled.e.value[,i] <- sample.ttpr$table$e.value
resampled.fdr[,i] <- sample.ttpr$table$fdr
resampled.t.obs[,i] <- sample.ttpr$table$t.obs
resampled.effect.size[,i] <- sample.ttpr$table$means.diff
resampled.effect.size[g,]
sample.ttpr$table[g,]
sample.ttpr$table[g,"means.diff"]
resampled.effect.size[g,]
## Initialize result tables
resampled.p.value <- data.frame(matrix(NA, nrow=nrow(x), ncol=iterations)); row.names(resampled.p.value) <- row.names(x)
resampled.e.value <- data.frame(matrix(NA, nrow=nrow(x), ncol=iterations)); row.names(resampled.e.value) <- row.names(x)
resampled.fdr <- data.frame(matrix(NA, nrow=nrow(x), ncol=iterations)); row.names(resampled.fdr) <- row.names(x)
resampled.t.obs <- data.frame(matrix(NA, nrow=nrow(x), ncol=iterations)); row.names(resampled.t.obs) <- row.names(x)
resampled.effect.size <- data.frame(matrix(NA, nrow=nrow(x), ncol=iterations)); row.names(resampled.effect.size) <- row.names(x)
## Bootstrap: iterate t-tests with resampled values
i <- 1
for (i in 1:iterations) {
verbose(paste(sep="", "Bootstrap iteration: ", i, "/", iterations), 1)
resampled.classes <- sampleClasses(cl, subset.sizes=subset.sizes, replace=replace)
# hist(table(resampled.classes), breaks=0:(max(table(resampled.classes)))) ## Number of repetitions per sample
# table(names(resampled.classes))
# table(cl)
sample.ttpr <- tTestPerRow(x = x[,resampled.classes], cl = names(resampled.classes), m2.minus.m1=m2.minus.m1, ...)
resampled.p.value[,i] <- sample.ttpr$table$p.value
resampled.e.value[,i] <- sample.ttpr$table$e.value
resampled.fdr[,i] <- sample.ttpr$table$fdr
resampled.t.obs[,i] <- sample.ttpr$table$t.obs
resampled.effect.size[,i] <- sample.ttpr$table$means.diff
}
`
## Bootstrap: iterate t-tests with resampled values
i <- 1
for (i in 1:iterations) {
verbose(paste(sep="", "Bootstrap iteration: ", i, "/", iterations), 1)
resampled.classes <- sampleClasses(cl, subset.sizes=subset.sizes, replace=replace)
# hist(table(resampled.classes), breaks=0:(max(table(resampled.classes)))) ## Number of repetitions per sample
# table(names(resampled.classes))
# table(cl)
sample.ttpr <- tTestPerRow(x = x[,resampled.classes], cl = names(resampled.classes), m2.minus.m1=m2.minus.m1) #, ...)
resampled.p.value[,i] <- sample.ttpr$table$p.value
resampled.e.value[,i] <- sample.ttpr$table$e.value
resampled.fdr[,i] <- sample.ttpr$table$fdr
resampled.t.obs[,i] <- sample.ttpr$table$t.obs
resampled.effect.size[,i] <- sample.ttpr$table$means.diff
}
names(resampled.p.value) <- paste(sep="","p.value.", 1:iterations)
names(resampled.e.value) <- paste(sep="","e.value.", 1:iterations)
names(resampled.fdr) <- paste(sep="","fdr.", 1:iterations)
names(resampled.t.obs) <- paste(sep="","t.obs.", 1:iterations)
row.names(resampled.p.value) <- row.names(x)
row.names(resampled.e.value) <- row.names(x)
row.names(resampled.fdr) <- row.names(x)
row.names(resampled.t.obs) <- row.names(x)
resampled.effect.size[g,]
sample.ttpr$table[g,"means.diff"]
g
full.ttpr <- tTestPerRow(x = x, cl = cl, m2.minus.m1=m2.minus.m1) #, ...)
full.ttpr$table[g,"means.diff"]
m2.minus.m1
unique("a", "b")
unique(c("a", "b", "a", "a", "b")
)
unique(c("a", "b", "a", "a", "b"))
unique(c("b", a", "b", "a", "a", "b"))
unique(c("a", "b", "a", "a", "b"))
unique(c("b", "b", "a", "a", "b"))
class.names <- unique(cl)
class.names
subset.table <- table(cl) ## Compute the frequency per class label
subset.table
subset.sizes <- as.vector(subset.table)
subset.sizes
subset.table
class.names
subset.table <- table(cl) ## Compute the frequency per class label
subset.table
subset.table[class.names]
subset.sizes
subset.sizes <- as.vector(subset.table[class.names])
subset.sizes
subset.names <- names(subset.table)
subset.names
subset.names <- class.names
subset.names
subset.sizes <- as.vector(subset.table[class.names])
subset.sizes
names(subset.sizes) <- class.names
subset.sizes
class.names <- unique(cl) ## Attention, we need the names in the same order as in the vector of classes
class.names
class.names <- unique(cl) ## Attention, we need the names in the same order as in the vector of classes to avoid problems with the option m2.minus.m1
cl.bootstrapped <- vector()
cl.bootstrapped
cl.resampled <- vector()
cl.resampled
g <- 1 ## Instantiate group number for testing
new.cl.selection <- sample(x=which(cl==subset.names[g]),
size=subset.sizes[g],
replace=replace)
new.cl.selection
names(new.cl.selection) <- rep(subset.names[g],subset.sizes[g])
names(new.cl.selection)
cl.resampled  <-
append(cl.resampled,new.cl.selection)
cl.resampled
cl.resampled <- vector()
g <- 1 ## Instantiate group number for testing
for (g in 1:length(subset.sizes)) {
new.cl.selection <- sample(x=which(cl==subset.names[g]),
size=subset.sizes[g],
replace=replace)
names(new.cl.selection) <- rep(subset.names[g],subset.sizes[g])
cl.resampled  <-
append(cl.resampled,new.cl.selection)
}
cl.resampled
library(stats4bioinfo)
bootstrap.result <-
tTestPerRow.bootstrap(x=expr, cl=sample.labels,
iterations=sampling.iterations, alpha = alpha, #'     support.quantile=0.95
var.equal=FALSE, m2.minus.m1 = TRUE)
plot(bootstrap.result$full.set.test$table$means.diff,
apply(bootstrap.result$effect.size, 1, mean))
g <- "NRN1|218625_at"
points(bootstrap.result$full.set.test$table[g, "means.diff"],
mean(unlist(bootstrap.result$effect.size[g,])), col="red")
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.bootstrap.R', echo=TRUE)
bootstrap.result <-
tTestPerRow.bootstrap(x=expr, cl=sample.labels,
iterations=sampling.iterations, alpha = alpha, #'     support.quantile=0.95
var.equal=FALSE, m2.minus.m1 = TRUE)
plot(bootstrap.result$full.set.test$table$means.diff,
apply(bootstrap.result$effect.size, 1, mean))
g <- "NRN1|218625_at"
points(bootstrap.result$full.set.test$table[g, "means.diff"],
mean(unlist(bootstrap.result$effect.size[g,])), col="red")
subset.names
class.names <- unique(cl) ## Attention, we need the names in the same order as in the vector of classes to avoid problems with the option m2.minus.m1
class.names
## If no subset size is specified, use sample sizes as resampling sizes
## (supposed to be used with replace=TRUE, to follow the classical bootstrap procedure).
subset.table <- table(cl) ## Compute the frequency per class label
subset.sizes <- as.vector(subset.table[class.names])
subset.names <- class.names
names(subset.sizes) <- class.names
subset.names
class.names <- unique(cl) ## Attention, we need the names in the same order as in the vector of classes to avoid problems with the option m2.minus.m1
subset.table <- table(cl) ## Compute the frequency per class label
subset.sizes <- as.vector(subset.table[class.names])
names(subset.sizes) <- class.names
subset.sizes
class.names <- names(subset.sizes)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.bootstrap.R', echo=TRUE)
library(stats4bioinfo)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.bootstrap.R', echo=TRUE)
library(stats4bioinfo)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.bootstrap.R', echo=TRUE)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
## Parameters to generate and analyse the simulated dataset
n.h1 <- 100 ## Number of rows under H1
n.h0 <- 100 ## Number of rows under H0
alpha <- 0.05
sample.labels <- c(rep("a", 50), rep("b", 50))
## Generate an artificial dataset with n.h1 truly positive and n.h0 truly negative rows
samples.per.groups <- unlist(table(sample.labels))
h1.data <- rnormPerGroup(n=samples.per.groups, mean=c(0, 0.5), sd=c(1,1), nrow=n.h1)
h0.data <- rnormPerGroup(n=samples.per.groups, mean=c(0, 0), sd=c(1,1), nrow=n.h0)
x <- rbind(h1.data$x, h0.data$x)
x.status <- rep(c("H1","H0"), times=c(n.h1, n.h0))
table(x.status)
## Run Student t-test on the simulated data set
x.student <- tTestPerRow(x, var.equal=TRUE, cl=sample.labels, alpha=alpha)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value")
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value")
ttpr.result
ttpr.result <- x.student
multi.t <- ttpr.result$table
## Identify the positive tests
if (alpha != ttpr.result$alpha) {
warning(paste("Selecting positive with alpha=", alpha, "different from ttpr alpha=", ttpr.result$alpha))
if (plot.ci) {
warning(paste(sep="", "Computing ",100*(1-alpha),"% confidence intervals"))
## Recompute the confidence interval width using user-provided alpha
## Compute the width of a confidence interval around the difference between means
if (ttpr.result$alternative == "two.sided") {
critical.t <- qt(p=1-alpha/2, df=multi.t$df)
} else {
critical.t <- qt(p=1-alpha, df=multi.t$df)
}
multi.t[, "ci.width"] <- 2*critical.t * multi.t$diff.stder
}
VolcanoPlot(multitest.table=multi.t, control.type=control.type, alpha=alpha, effect.size.col="means.diff", ...)
VolcanoPlot(multitest.table=multi.t, control.type=control.type, alpha=alpha, effect.size.col="means.diff")
control.type="fdr"
alpha=ttpr.result$alpha
VolcanoPlot(multitest.table=multi.t, control.type=control.type, alpha=alpha, effect.size.col="means.diff")
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value")
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value")
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", ylab="boum")
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value")
paste(sep="", "-log10(", control.type, ")")
## Run Student t-test on the simulated data set
x.student <- tTestPerRow(x, var.equal=TRUE, cl=sample.labels, alpha=alpha)
## Draw a classical Volcano plot with -log10(p-value) on the Y axis.
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value")
## Draw a classical Volcano plot
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value")
## Draw a classical Volcano plot
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value")
## Draw a Volcano plot with horizontal bars denoting the confidence intervals
## around the difference between means
tTestPerRow.plotVolcano(x.student, legend.corner="topleft",
plot.ci=TRUE, control.type="p.value", alpha=)
x.student <- tTestPerRow(x, var.equal=TRUE, cl=sample.labels, alpha=alpha, m2.minus.m1=TRUE)
## Draw a classical Volcano plot with -log10(p-value) on the Y axis.
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value")
## Draw a Volcano plot with horizontal bars denoting the confidence intervals
## around the difference between means
tTestPerRow.plotVolcano(x.student, legend.corner="topleft",
plot.ci=TRUE, control.type="p.value", alpha=)
## Draw a volcano plot where the colors represent the true status (TP, FP, TN, FN)
## rather than the significance.
(confusion.table <- table(x.status, positive=x.student$table$p.value < alpha))
pred.status <- rep(NA, times=nrow(x.student$table))
pred.status[x.status=="H1" & x.student$table$p.value < alpha] <- "TP" ## True positives
pred.status[x.status=="H0" & x.student$table$p.value >= alpha] <- "TN" ## True negatives
pred.status[x.status=="H0" & x.student$table$p.value < alpha] <- "FP" ## False positive
pred.status[x.status=="H1" & x.student$table$p.value >= alpha] <- "FN" ## False negatives
table(pred.status)
pred.status.colors <- c("TP"="darkgreen", "FP"="red", "FN"="orange", "TN"="grey")
tTestPerRow.plotVolcano(x.student, legend.corner=NULL,
plot.ci=TRUE, plot.points=TRUE, tick.size=0.08, control.type="p.value",
col.points=pred.status.colors[pred.status])
legend("topleft", legend=paste(table(pred.status), names(table(pred.status))),
col=pred.status.colors[names(table(pred.status))], lwd=2)
## Draw two volcano plots separating positive and negative tests, to show that
## the p-value cutoff is equivalent to a selection of the confidence interval
## that do not cross the 0 value. Set the p-value threshold to 1/N, which is
## equivalent to set the control on e-value <= 1.
par(mfrow=c(1,2))
corrected.alpha <- 1/nrow(x.student$table)
tTestPerRow.plotVolcano(x.student, col.points=NULL, col.positive="black",
legend.corner=NULL, plot.ci=TRUE, tick.size=0,
control.type="p.value", alpha=corrected.alpha, main="Positive tests")
tTestPerRow.plotVolcano(x.student, col.points="grey", col.positive=NA,
legend.corner=NULL, plot.ci=TRUE, tick.size=0,
control.type="p.value", alpha=corrected.alpha, main="Negative tests")
par(mfrow=c(1,1))
corrected.alpha <- 1/nrow(x.student$table)
corrected.alpha
tTestPerRow.plotVolcano(x.student, col.points=NULL, col.positive="black",
legend.corner=NULL, plot.ci=TRUE, tick.size=0,
control.type="p.value", alpha=corrected.alpha, main="Positive tests")
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
## around the difference between means
tTestPerRow.plotVolcano(x.student, legend.corner="topleft",
plot.ci=TRUE, control.type="p.value", alpha=)
## Draw a volcano plot where the colors represent the true status (TP, FP, TN, FN)
## rather than the significance.
(confusion.table <- table(x.status, positive=x.student$table$p.value < alpha))
pred.status <- rep(NA, times=nrow(x.student$table))
pred.status[x.status=="H1" & x.student$table$p.value < alpha] <- "TP" ## True positives
pred.status[x.status=="H0" & x.student$table$p.value >= alpha] <- "TN" ## True negatives
pred.status[x.status=="H0" & x.student$table$p.value < alpha] <- "FP" ## False positive
pred.status[x.status=="H1" & x.student$table$p.value >= alpha] <- "FN" ## False negatives
table(pred.status)
pred.status.colors <- c("TP"="darkgreen", "FP"="red", "FN"="orange", "TN"="grey")
tTestPerRow.plotVolcano(x.student, legend.corner=NULL,
plot.ci=TRUE, plot.points=TRUE, tick.size=0.08, control.type="p.value",
col.points=pred.status.colors[pred.status])
legend("topleft", legend=paste(table(pred.status), names(table(pred.status))),
col=pred.status.colors[names(table(pred.status))], lwd=2)
## Draw two volcano plots separating positive and negative tests, to show that
## the p-value cutoff is equivalent to a selection of the confidence interval
## that do not cross the 0 value. Set the p-value threshold to 1/N, which is
## equivalent to set the control on e-value <= 1.
par(mfrow=c(1,2))
corrected.alpha <- 1/nrow(x.student$table)
tTestPerRow.plotVolcano(x.student, col.points=NULL, col.positive="black",
legend.corner=NULL, plot.ci=TRUE, tick.size=0,
control.type="p.value", alpha=corrected.alpha, main="Positive tests")
tTestPerRow.plotVolcano(x.student, col.points="grey", col.positive=NA,
legend.corner=NULL, plot.ci=TRUE, tick.size=0,
control.type="p.value", alpha=corrected.alpha, main="Negative tests")
par(mfrow=c(1,1))
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
help(package="stats4bioinfo")
library(stats4bioinfo)
effect.threshold=NULL
effect.threshold
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
library(stats4bioinfo)
y.values[is.na(y.values)] <- -1
library(stats4bioinfo)
plot(1:20)
plot(1:20, pch=1:20)
plot(1:20, pch=17)
multitest.table.sorted
library(stats4bioinfo)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value")
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 1)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
par(mfrow=c(1,1))
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.6)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
library(stats4bioinfo)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
library(stats4bioinfo)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
print(legend.table)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
print(legend.table)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
?par
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
print(legend.table)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
legend.table
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.7)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
legend.table
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.2)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.2)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.2)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.3)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.3)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.plotVolcano.R', echo=TRUE)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.3)
tTestPerRow.plotVolcano(x.student, legend.corner="topleft",
plot.ci=TRUE, control.type="p.value", alpha=)
x.student <- tTestPerRow(x, var.equal=TRUE, cl=sample.labels, alpha=alpha, m2.minus.m1=TRUE)
## Draw a classical Volcano plot with -log10(p-value) on the Y axis.
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value")
## Add a threshold on the effect size
tTestPerRow.plotVolcano(x.student, legend.corner="topleft", control.type = "p.value", effect.threshold = 0.6)
## Draw a Volcano plot with horizontal bars denoting the confidence intervals
## around the difference between means
tTestPerRow.plotVolcano(x.student, legend.corner="topleft",
plot.ci=TRUE, control.type="p.value", alpha=)
## Draw a volcano plot where the colors represent the true status (TP, FP, TN, FN)
## rather than the significance.
(confusion.table <- table(x.status, positive=x.student$table$p.value < alpha))
pred.status <- rep(NA, times=nrow(x.student$table))
pred.status[x.status=="H1" & x.student$table$p.value < alpha] <- "TP" ## True positives
pred.status[x.status=="H0" & x.student$table$p.value >= alpha] <- "TN" ## True negatives
pred.status[x.status=="H0" & x.student$table$p.value < alpha] <- "FP" ## False positive
pred.status[x.status=="H1" & x.student$table$p.value >= alpha] <- "FN" ## False negatives
table(pred.status)
pred.status.colors <- c("TP"="darkgreen", "FP"="red", "FN"="orange", "TN"="grey")
tTestPerRow.plotVolcano(x.student, legend.corner=NULL,
plot.ci=TRUE, plot.points=TRUE, tick.size=0.08, control.type="p.value",
col.points=pred.status.colors[pred.status])
legend("topleft", legend=paste(table(pred.status), names(table(pred.status))),
col=pred.status.colors[names(table(pred.status))], lwd=2)
## Draw two volcano plots separating positive and negative tests, to show that
## the p-value cutoff is equivalent to a selection of the confidence interval
## that do not cross the 0 value. Set the p-value threshold to 1/N, which is
## equivalent to set the control on e-value <= 1.
par(mfrow=c(1,2))
corrected.alpha <- 1/nrow(x.student$table)
tTestPerRow.plotVolcano(x.student, col.points=NULL, col.positive="black",
legend.corner=NULL, plot.ci=TRUE, tick.size=0,
control.type="p.value", alpha=corrected.alpha, main="Positive tests")
tTestPerRow.plotVolcano(x.student, col.points="grey", col.positive=NA,
legend.corner=NULL, plot.ci=TRUE, tick.size=0,
control.type="p.value", alpha=corrected.alpha, main="Negative tests")
par(mfrow=c(1,1))
@export
tTestPerRow.plotVolcano <- function(
ttpr.result,
control.type="fdr",
alpha=ttpr.result$alpha,
ylab=paste(sep="", "-log10(", control.type, ")"),
plot.ci=FALSE,
... ## additional parameters are passed to the VolcanoPlot function
) {
multi.t <- ttpr.result$table
## Identify the positive tests
if (alpha != ttpr.result$alpha) {
warning(paste("Selecting positive with alpha=", alpha, "different from ttpr alpha=", ttpr.result$alpha))
if (plot.ci) {
warning(paste(sep="", "Computing ",100*(1-alpha),"% confidence intervals"))
## Recompute the confidence interval width using user-provided alpha
## Compute the width of a confidence interval around the difference between means
if (ttpr.result$alternative == "two.sided") {
critical.t <- qt(p=1-alpha/2, df=multi.t$df)
} else {
critical.t <- qt(p=1-alpha, df=multi.t$df)
}
multi.t[, "ci.width"] <- 2*critical.t * multi.t$diff.stder
}
VolcanoPlot(multitest.table=multi.t, control.type=control.type, alpha=alpha, effect.size.col="means.diff", ylab=ylab, plot.ci=plot.ci, ...)
}
#' @title Draw a Volcano plot.
#' @author Jacques van Helden (\email{Jacques.van-Helden@@univ-amu.fr})
#' @description Draw a volcano plot from a table containing at least one column for the effect size, and another one for the p-value or an equivalent measure of significance (FDR, e-value, FWER, ...).
#' @param result.table A data frame containing one row per feature, and one column per statistics.
#' @param effect.size.col A column number or name, inidicating which column of the result table contains the effect size, which will be
#' @param control.type="p.value"  A column number or name, indicating which column of the result table contains the p-value or an equivalent indication of the significance of each feature (example: "fdr", "e.value", "p.value")
#' @param alpha=0.05    Alpha threshold for the control of false positives
#' @param effect.threshold=NULL Threshold on the absolute value of the effect size.
#' @param sort.by.pval=FALSE Sort row by p-value in order to plot significant elements on top of non-significant
library(stats4bioinfo)
source('~/Documents/enseignement/bioinformatics_courses/statistics_bioinformatics/R-packages/stats4bioinfo/R/tTestPerRow.bootstrap.VolcanoBoxPlot.R', echo=TRUE)
library(stats4bioinfo)
