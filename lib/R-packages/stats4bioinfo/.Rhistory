cluster.file <- paste(sep = "",
prefix["comparison_file"],
"_", suffix.deg, "_DESeq2_edgeR_clusters.tab")
write.table(x = cluster.table, row.names = FALSE,
file = cluster.file, sep = "\t", quote=FALSE)
verbose(paste(sep="", "\t\tCluster file\t", cluster.file), 1)
################################################################
## Functional enrichment analysis
run.functional.enrichment <- FALSE
if (run.functional.enrichment & exists("org.db") & !is.na(org.db) & !is.null(org.db) & exists("gene.info.rsat")) {
library(org.db, character.only = TRUE)
verbose("Starting the analysis of functional enrichment")
## Convert IDs to entrez IDs
verbose("Converting gene names to Entrez IDs")
all.gene.ids <- row.names(result.table)
if (sum(!is.na(gene.info$entrez.id)) == 0) {
gg <- bitr(row.names(result.table), fromType="SYMBOL", toType="ENTREZID", annoDb=org.db, drop=FALSE)
row.names(gg) <- gg$SYMBOL
# dim(gg)
# dim(result.table)
# head(gg)
all.entrez.ids <- gg[all.gene.ids, "ENTREZID"]
} else {
all.entrez.ids <- as.vector(gene.info[all.gene.ids,"entrez.id"])
}
names(all.entrez.ids) <- gene.info[all.gene.ids,"gene_id"]
# table(!is.na(all.entrez.ids))
all.entrez.ids <- unique(na.omit(all.entrez.ids))
# length(all.entrez.ids)
## Select the selection columns on wchich enrichment analysis will be performed.
## We select each single-score threshold column, as well as the combined thresholds ("DEG" columns).
# names(result.table)
geneset.selection.columns <- vector()
for (deg.tool in deg.tools) {
for (s in names(thresholds)) {
geneset.selection.columns <- append(geneset.selection.columns, paste(sep="", deg.tool, ".", s, "_", thresholds[s]))
}
geneset.selection.columns <- append(geneset.selection.columns, paste(sep="", deg.tool, ".DEG"))
}
# print(geneset.selection.columns)
col <- "edgeR.DEG"
for (col in geneset.selection.columns) {
verbose(paste("Gene selection column", col))
geneset.ids <- as.vector(as.matrix(all.gene.ids[result.table[,col] == 1]))
geneset <- all.entrez.ids[geneset.ids]
# table(is.na(geneset))
geneset <- geneset[!is.na(geneset)]
gene.nb <- length(geneset)
verbose(paste("\t", gene.nb, "selected genes"))
if (gene.nb == 0) {
verbose(paste("\t", "Skipping: not a single gene selected"))
next
}
# length(geneset)
verbose(paste("\tGeneFunctional enrichment"))
enrich.result <- functional.enrichment(geneset=geneset,
allgenes=all.entrez.ids,
db=org.db,
ontology="BP",
thresholds = c("evalue"=1, "qvalue"=0.05),
select.positives=FALSE,
run.GOstats = TRUE,
run.clusterProfiler = FALSE,
organism.names=organism.names,
plot.adjust = TRUE)
## Select GO Biological process result table
go.bp.table <- enrich.result$go.bp.table
go.bp.table.positive <- go.bp.table[go.bp.table$positive==1,]
# View(enrich.result$go.bp.table)
## Save full result table
go.bp.file <- paste(sep = "", prefix["comparison_file"],
"_", suffix.deg,
"_", col,
"_GOstats_all.tab")
write.table(x = go.bp.table, row.names = FALSE,
file = go.bp.file, sep = "\t", quote=FALSE)
verbose(paste(sep="", "\tGOstats BP over-representation\t",
nrow(go.bp.table), " rows\t", go.bp.file), 1)
## Save positive associations in a separate file
go.bp.file.positive <- paste(sep = "", prefix["comparison_file"],
"_", suffix.deg,
"_", col,
"_GOstats_positive.tab")
write.table(x = go.bp.table.positive, row.names = FALSE,
file = go.bp.file.positive, sep = "\t", quote=FALSE)
verbose(paste(sep="", "\tGOstats BP over-representation\t",
nrow(go.bp.table.positive), " rows\t", go.bp.file.positive), 1)
#       kk <- enrichKEGG(gene = geneset,
#                        organism = "eco",
#                        pvalueCutoff = 1,
#                        readable = TRUE)
#       head(summary(kk))
#
## Build a custom GO map from 2-column data.frame with GO, gene (entrez ID)
if ((exists("go.map.file")) & (exists("go.description.file"))) {
## Read description of GO terms
go.description <- read.delim(go.description.file, header=TRUE, row.names=1)
# dim(go.description)
# names(go.description)
# head(go.description)
## Read the GO-gene annotation table (tab-delimited file)
gomap.frame <- read.delim(go.map.file, header=FALSE)
names(gomap.frame) <- c("gene.id",
"GO.id",
"gene.name",
"transcript.name",
"protein.id",
"entrez.id")
gomap.frame$GO.descr <- go.description[as.vector(gomap.frame$GO.id), "GO.Term"] ## Load GO term descriptions in GO-gene table
# dim(gomap.frame)
# head(gomap.frame)
#go.annot <- buildGOmap(gomap.frame[,c(2,6)])
go.enricher.res = enricher(geneset,
TERM2GENE=gomap.frame[, c("GO.id", "entrez.id")],
TERM2NAME=gomap.frame[, c("GO.id", "GO.descr")],
pAdjustMethod = "BH",
minGSSize = 0,
pvalueCutoff = 1,
qvalueCutoff=1)
go.enricher.table <- data.frame(go.enricher.res@result)
go.enricher.table <- complete.enrich.table(go.enricher.table, pvalue.column = "pvalue")
# dim(go.enricher.table)
# View(go.enricher.table)
## Select positive rows
go.enricher.table.positive <- go.enricher.table[go.enricher.table$positive==1,]
## Save result table
go.enricher.file <- paste(sep = "", prefix["comparison_file"],
"_", suffix.deg,
"_", col,
"_GO_enricher_all.tab")
write.table(x = go.enricher.table, row.names = FALSE,
file = go.enricher.file, sep = "\t", quote=FALSE)
verbose(paste(sep="", "\tGO clusterProfiles::enricher\t",
nrow(go.enricher.table), " rows\t", go.enricher.file), 1)
## Save result table
go.enricher.file.positive <- paste(sep = "", prefix["comparison_file"],
"_", suffix.deg,
"_", col,
"_GO_enricher_positive.tab")
write.table(x = go.enricher.table.positive, row.names = FALSE,
file = go.enricher.file.positive, sep = "\t", quote=FALSE)
verbose(paste(sep="", "\tGO clusterProfiles::enricher\t",
nrow(go.enricher.table.positive), " rows\t", go.enricher.file.positive), 1)
}
}
#   library("GenomicFeatures")
#   gtf.file <- "genome/Escherichia_coli_str_k_12_substr_mg1655.GCA_000005845.2.28.gtf"
#   txdb <- makeTxDbFromGFF(file=gtf.file,
#                           organism="Escherichia coli",
#                           #                         genome="Escherichia_coli_str_k_12_substr_mg1655",
#                           dataSource="ftp://ftp.ensemblgenomes.org/pub/bacteria/release-28/fasta/bacteria_0_collection/escherichia_coli_str_k_12_substr_mg1655/")
#   seqlevels(txdb)
#   genome(txdb) <- "Escherichia_coli_str_k_12_substr_mg1655"
#
#   # Build specific GO map using GFF file
#   #   library(biomaRt)
#   #   Mtb <- useMart(biomart="fungi_mart_28",
#   #                  dataset="scerevisiae")
#   #   listDatasets(mart = Mtb)
#   #
#   #   mmart <-
#   #     makeTxDbFromBiomart(biomart = "fungi_mart_28",
#   #                         dataset = "scerevisiae_gene_ensembl")
#   #   listDatasets(biomart = "fungi_mart_28")
#   #   library("biomaRt")
#   #   listMarts()[1] ## The bacterial Mart has disappeared in version 28 !!!!
#   library("clusterProfiler")
#   library("org.EcK12.eg.db")
#   eg <- bitr(gene.ids, fromType="SYMBOL", toType="ENTREZID", annoDb="org.EcK12.eg.db")
#
}
################################################################
## Summarise results of the current analysis
## Instantiate a data frame for the current analysis
current.summary <- data.frame(
"analysis"=paste(sep="", prefix["comparison"]),
"cond1" = cond1, "cond2" = cond2)
## DESeq2 results
for (s in names(thresholds)) {
for (deg.tool in deg.tools) {
selection.column <- paste(sep="", deg.tool, ".", s, "_", thresholds[s])
current.summary[, selection.column] <- sum(result.table[, selection.column], na.rm=TRUE)
}
for (combination in c("edgeR_and_DESeq2",
"edgeR_not_DESeq2",
"DESeq2_not_edgeR",
"none")) {
selection.column <- paste(sep="_", s, combination)
current.summary[, selection.column] <- sum(result.table[, selection.column], na.rm=TRUE)
}
## Export gene lists
}
if (i == 1) {
summary.per.analysis <- current.summary
} else {
summary.per.analysis <- rbind(summary.per.analysis, current.summary)
}
}
gene.info
write.table(x = gene.info, row.names = FALSE,
file = gene.info.out, sep = "\t", quote=FALSE)
verbose(paste(sep="", "\tGene info table\t", gene.info.out), 1)
gene.info
gene.info
gene.info
exists("gtf.file")
verbose(paste("Loading gene information from GTF file", gtf.file))
txdb <- makeTxDbFromGFF(file=gtf.file,
organism=organism.names["name"],
dataSource=gtf.source)
source('~/mountrsatlocal/fg-chip-seq/scripts/R-scripts/rna-seq_DEG_detection.R', echo=TRUE)
setwd(dir.main)
getwd()
source('~/mountrsatlocal/fg-chip-seq/scripts/R-scripts/rna-seq_DEG_detection.R', echo=TRUE)
source('~/mountrsatlocal/fg-chip-seq/scripts/R-scripts/rna-seq_DEG_detection.R', echo=TRUE)
source('~/mountrsatlocal/fg-chip-seq/scripts/R-scripts/rna-seq_DEG_detection.R', echo=TRUE)
both <- result.table$DEG_edgeR_and_DESeq2 == 1
edgeR.only <- result.table$DEG_edgeR_not_DESeq2 == 1
DESeq2.only <- result.table$DEG_DESeq2_not_edgeR == 1
none <- result.table$DEG_none
gene.palette <- c("both"="darkgreen",
"none"="#BBBBBB",
"edgeR.only" = "red",
"DESeq2.only" = "orange")
gene.colors <- rep(x = gene.palette["none"], times = nrow(result.table))
gene.colors[both] <- gene.palette["both"]
gene.colors[edgeR.only] <-  gene.palette["edgeR.only"]
gene.colors[DESeq2.only] <-  gene.palette["DESeq2.only"]
################################################################
## P-value comparison plot
## Compare DESeq2 and edgeR nominal p-values
#png(file=paste(sep = "", prefix["comparison_figure"], suffix.deg, "_DESeq2_vs_edgeR_pvalues", ".png"))
pdf(file=paste(sep = "", prefix["comparison_figure"], suffix.deg, "_DESeq2_vs_edgeR_pvalues", ".pdf"))
plot.cex=0.7
plot(result.table$edgeR.pvalue,
result.table$DESeq2.pvalue,
pch=20,
cex=plot.cex,
xlab="edgeR nominal p-value (log scale)", ylab="DESeq2 nominal p-value (log scale)",
log="xy", main=paste(sep=" ", cond1, "vs", cond2, "; P-value comparisons"),
col=gene.colors,
panel.first=grid(lty="solid", col="#DDDDDD"))
abline(a=0, b=1)
legend("topleft",
pch=1, cex=1,
bg="white", bty="o",
col=gene.palette[c("both", "DESeq2.only", "edgeR.only", "none")],
legend = c(paste(sum(both, na.rm=TRUE), "both"),
paste(sum(DESeq2.only, na.rm=TRUE), "DESeq2 only"),
paste(sum(edgeR.only, na.rm=TRUE), "edgeR only"),
paste(sum(none, na.rm=TRUE), "none")))
silence <- dev.off()
################################################################
## Draw Venn diagram with number of genes declared significant with edgeR and DESeq2, resp
## Lists of differentially expressed genes (DEG) based on all thresholds together
venn.counts.deg <- vennCounts(result.table[,c("edgeR.DEG", "DESeq2.DEG")])
pdf(file=paste(sep = "", prefix["comparison_figure"], suffix.deg, "_DESeq2_vs_edgeR_Venn_DEG", ".pdf"))
#   pdf(file= file.path(
#     dir.figures,
#     paste(sep = "", "DESeq2_vs_edgeR_Venn",
#           "_DEG",
#           "_", prefix["comparison"], ".pdf")))
vennDiagram(venn.counts.deg, cex=1,
main=paste(sep='; ',
paste(sep=" ", cond1, "vs", cond2, "DEG")))
silence <- dev.off()
## For each threshold separately
for (s in names(thresholds)) {
venn.counts.one.threshold <- vennCounts(
result.table[,c(paste(sep="", "edgeR.",s,"_", thresholds[s]),
paste(sep="", "DESeq2.",s,"_", thresholds[s]))])
pdf(file=paste(sep = "", prefix["comparison_figure"], suffix.deg, "_DESeq2_vs_edgeR_Venn",
"_", s, "_", thresholds[s], ".pdf"))
#     pdf(file= file.path(
#       dir.figures,
#       paste(sep = "", "DESeq2_vs_edgeR_Venn",
#             "_", s, "_", thresholds[s],
#             "_", prefix["comparison"], ".pdf")))
vennDiagram(venn.counts.one.threshold, cex=1, main=paste(sep=" ", cond1, "vs", cond2, "; ", s, "threshold = ", thresholds[s]))
silence <- dev.off()
}
################################################################
## Compare counts per million reads (CPMs) between samples.
## This is just to get an intuitive idea, since CPMs are
## not recommended for diffferential detection.
verbose("\t\tmean CPM plot", 2)
pdf(file=paste(sep = "", prefix["comparison_figure"], "CPM_plot",  ".pdf"))
plot(result.table[,c("cpm1.mean", "cpm2.mean")],
log="xy",
main = "Mean counts per million reads (log scales)",
xlab=paste(cond1),
ylab=paste(cond2),
col=gene.colors,
panel.first=grid(lty="solid", col="#DDDDDD"))
## Plot genes on the top layer to highlight them
points(result.table[both,c("cpm1.mean", "cpm2.mean")], col=gene.palette["both"])
points(result.table[DESeq2.only,c("cpm1.mean", "cpm2.mean")], col=gene.palette["DESeq2.only"])
points(result.table[edgeR.only,c("cpm1.mean", "cpm2.mean")], col=gene.palette["edgeR.only"])
abline(a=0, b=1)
legend("topleft",
pch=1, cex=1,
bg="white", bty="o",
col=gene.palette[c("both", "DESeq2.only", "edgeR.only", "none")],
legend = c(paste(sum(both, na.rm=TRUE), "both"),
paste(sum(DESeq2.only, na.rm=TRUE), "DESeq2 only"),
paste(sum(edgeR.only, na.rm=TRUE), "edgeR only"),
paste(sum(none, na.rm=TRUE), "none")))
silence <- dev.off()
################################################################
## Draw MA plot with CPMs
verbose("\t\tCPM MA plot", 2)
pdf(file=paste(sep = "", prefix["comparison_figure"], "_CPM_MA_plot.pdf"))
#pdf(file=file.path(dir.figures, paste(sep = "", "CPM_MA_plot_", prefix["comparison"], ".pdf")))
plot(result.table[,c("A", "M")],
main = paste(sep=" ", cond1, "vs", cond2, ": CPMs MA plot"),
xlab=paste(sep="", "A = log2(", cond1, "*", cond2, ")/2"),
ylab=paste(sep="", "M = log2(", cond1, "/", cond2, ")"),
col=gene.colors,
panel.first=grid(lty="solid", col="#DDDDDD"))
## Plot genes on the top layer to highlight them
points(result.table[both,c("A", "M")], col=gene.palette["both"])
points(result.table[DESeq2.only,c("A", "M")], col=gene.palette["DESeq2.only"])
points(result.table[edgeR.only,c("A", "M")], col=gene.palette["edgeR.only"])
abline(h=0)
legend("bottomright",
pch=1, cex=1,
bg="white", bty="o",
col=gene.palette[c("both", "DESeq2.only", "edgeR.only", "none")],
legend = c(paste(sum(both, na.rm=TRUE), "both"),
paste(sum(DESeq2.only, na.rm=TRUE), "DESeq2 only"),
paste(sum(edgeR.only, na.rm=TRUE), "edgeR only"),
paste(sum(none, na.rm=TRUE), "none")))
silence <- dev.off()
## Volcano plot
for (deg.tool in deg.tools) {
criterion <- "padj"
for (criterion in c("padj", "evalue")) {
verbose(paste(sep=" ", "\t\t", deg.tool, criterion, "Volcano plot"), 3)
pdf(file=paste(sep="_", prefix[paste(sep="", deg.tool, "_figure")],
criterion, thresholds[criterion], "VolcanoPlot.pdf"))
control.col <- paste(sep=".", deg.tool, criterion)
effect.col <- paste(sep=".", deg.tool, "log2FC")
VolcanoPlot(na.omit(result.table[,c(control.col, effect.col)]),
control.type=control.col, alpha = thresholds[criterion],
effect.size.col=effect.col, xlab="log2(fold-change)", effect.threshold=log2(thresholds["FC"]),
main=paste(sep=" ", cond1, "vs", cond2, "; ", deg.tool, " ", criterion, "volcano plot"),
sort.by.pval = TRUE, plot.points = TRUE,
legend.corner = "topleft")
quiet <- dev.off()
}
}
################################################################
## Store the Differentally expressed genes in a two-column file
# names(result.table)
DEG.columns  <- c("DEG_edgeR_and_DESeq2", "edgeR.DEG", "DESeq2.DEG", "padj_edgeR_and_DESeq2", "evalue_edgeR_and_DESeq2")
mi
## Compute confidence interval limits
source('~/mountrsatlocal/fg-chip-seq/scripts/R-scripts/rna-seq_DEG_detection.R', echo=TRUE)
for (deg.tool in deg.tools) {
criterion <- "padj"
for (criterion in c("padj", "evalue")) {
verbose(paste(sep=" ", "\t\t", deg.tool, criterion, "Volcano plot"), 3)
pdf(file=paste(sep="_", prefix[paste(sep="", deg.tool, "_figure")],
criterion, thresholds[criterion], "VolcanoPlot.pdf"))
control.col <- paste(sep=".", deg.tool, criterion)
effect.col <- paste(sep=".", deg.tool, "log2FC")
VolcanoPlot(na.omit(result.table[,c(control.col, effect.col)]),
control.type=control.col, alpha = thresholds[criterion],
effect.size.col=effect.col, xlab="log2(fold-change)", effect.threshold=log2(thresholds["FC"]),
main=paste(sep=" ", cond1, "vs", cond2, "; ", deg.tool, " ", criterion, "volcano plot"),
sort.by.pval = TRUE, plot.points = TRUE,
legend.corner = "topleft")
quiet <- dev.off()
}
}
source('~/mountrsatlocal/fg-chip-seq/scripts/R-scripts/rna-seq_DEG_detection.R', echo=TRUE)
column
DEG.columns  <- c("DEG_edgeR_and_DESeq2", "edgeR.DEG", "DESeq2.DEG", "padj_edgeR_and_DESeq2", "evalue_edgeR_and_DESeq2")
# column <- DEG.columns[3]
deg.id.lists <- list()
column <- DEG.columns[1]
for (column in DEG.columns) {
is.DEG <- !is.na(result.table[,column]) & result.table[,column] == 1
# table(is.DEG)
DEG.ids <- na.omit(row.names(result.table[is.DEG,]))
deg.id.lists[[column]] <- DEG.ids
# length(DEG.ids)
# table(is.na(DEG.ids))
DEG.genes <- data.frame(gene.id=DEG.ids, "cluster"=rep(column, times=length(DEG.ids)))
if (column == DEG.columns[1]) {
cluster.table <- DEG.genes
} else {
cluster.table <- rbind(cluster.table, DEG.genes)
}
}
column <- DEG.columns[1]
column <- DEG.columns[1]
column
is.DEG <- !is.na(result.table[,column]) & result.table[,column] == 1
DEG.ids <- na.omit(row.names(result.table[is.DEG,]))
deg.id.lists[[column]] <- DEG.ids
DEG.genes <- data.frame(gene.id=DEG.ids, "cluster"=rep(column, times=length(DEG.ids)))
if (column == DEG.columns[1]) {
cluster.table <- DEG.genes
}
else {
cluster.table <- rbind(cluster.table, DEG.genes)
}
if (column == DEG.columns[1]) {
cluster.table <- DEG.genes
} else {
cluster.table <- rbind(cluster.table, DEG.genes)
}
for (column in DEG.columns) {
is.DEG <- !is.na(result.table[,column]) & result.table[,column] == 1
# table(is.DEG)
DEG.ids <- na.omit(row.names(result.table[is.DEG,]))
deg.id.lists[[column]] <- DEG.ids
# length(DEG.ids)
# table(is.na(DEG.ids))
DEG.genes <- data.frame(gene.id=DEG.ids, "cluster"=rep(column, times=length(DEG.ids)))
if (column == DEG.columns[1]) {
cluster.table <- DEG.genes
} else {
cluster.table <- rbind(cluster.table, DEG.genes)
}
}
column
DEG.columns[1]
DEG.columns  <- c("DEG_edgeR_and_DESeq2", "edgeR.DEG", "DESeq2.DEG", "padj_edgeR_and_DESeq2", "evalue_edgeR_and_DESeq2")
column <- DEG.columns[1]
for (column in DEG.columns) {
is.DEG <- !is.na(result.table[,column]) & result.table[,column] == 1
# table(is.DEG)
DEG.ids <- na.omit(row.names(result.table[is.DEG,]))
deg.id.lists[[column]] <- DEG.ids
# length(DEG.ids)
# table(is.na(DEG.ids))
DEG.genes <- data.frame(gene.id=DEG.ids, "cluster"=rep(column, times=length(DEG.ids)))
if (column == DEG.columns[1]) {
cluster.table <- DEG.genes
} else {
cluster.table <- rbind(cluster.table, DEG.genes)
}
}
cluster.table
cluster.table
DEG.genes
cluster.table
if (column == DEG.columns[1]) {
cluster.table <- DEG.genes
} else {
cluster.table <- rbind(cluster.table, DEG.genes)
}
for (column in DEG.columns) {
is.DEG <- !is.na(result.table[,column]) & result.table[,column] == 1
# table(is.DEG)
DEG.ids <- na.omit(row.names(result.table[is.DEG,]))
deg.id.lists[[column]] <- DEG.ids
# length(DEG.ids)
# table(is.na(DEG.ids))
DEG.genes <- data.frame(gene.id=DEG.ids, "cluster"=rep(column, times=length(DEG.ids)))
if (column == DEG.columns[1]) {
cluster.table <- DEG.genes
} else {
cluster.table <- rbind(cluster.table, DEG.genes)
}
}
column
if (column == DEG.columns[1])
{
cluster.table <- DEG.genes
} else {
cluster.table <- rbind(cluster.table, DEG.genes)
}
if (column == DEG.columns[1]) {
cluster.table <- DEG.genes
} else {
cluster.table <- rbind(cluster.table, DEG.genes)
}
is.DEG <- !is.na(result.table[,column]) & result.table[,column] == 1
# table(is.DEG)
DEG.ids <- na.omit(row.names(result.table[is.DEG,]))
deg.id.lists[[column]] <- DEG.ids
# length(DEG.ids)
# table(is.na(DEG.ids))
DEG.genes <- data.frame(gene.id=DEG.ids, "cluster"=rep(column, times=length(DEG.ids)))
if (column == DEG.columns[1]) {
cluster.table <- DEG.genes
} else {
cluster.table <- rbind(cluster.table, DEG.genes)
}
is.DEG
result.table[,column]
result.table
result.table
result.table
n
r
name
n
ader
n
View(result.table)
column
thresholds <- c("padj"=0.05,"evalu" "FC"=1.5)
source('~/mountrsatlocal/fg-chip-seq/scripts/R-scripts/rna-seq_DEG_detection.R', echo=TRUE)
column
View(result.table)
DEG.columns  <- c("DEG_edgeR_and_DESeq2", "edgeR.DEG", "DESeq2.DEG", "padj_edgeR_and_DESeq2")
source('~/mountrsatlocal/fg-chip-seq/scripts/R-scripts/rna-seq_DEG_detection.R', echo=TRUE)
source('~/mountrsatlocal/fg-chip-seq/scripts/R-scripts/rna-seq_DEG_detection.R', echo=TRUE)
