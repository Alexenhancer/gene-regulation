rule sickle_paired_ends:
    """Trim paired-end reads (fastq.gz format) using sickle.

    This script requires to specify the following parameters in the
    snakemake config file.

      config["sickle"]["qual_type"]
      config["sickle"]["threshold"]
      config["sickle"]["other_options"]
      config["suffix"]["reads_fwd"]
      config["suffix"]["reads_rev"]
      config["qsub"]


    The quality threshold (threshold) and the quality type (qual_type)
    parameters have to be determined in the config file (json format)
    linked in the snakefile (workflow). Any other parameters in the
    other_options will be passed to sickle.

    The rule produces three output read files in fastq format:
    
    forward reads
    reverse reads
    single reads: unmatched between the forward and reverse strands.

    The sickle summary is stored in a separate file.

    """
    
    input: forward= config["dir"]["data_root"] +  "{reads}" + config["suffix"]["reads_fwd"] + ".fastq", \
           reverse= config["dir"]["data_root"] +  "{reads}" + config["suffix"]["reads_rev"] + ".fastq"
    output: forward = config["dir"]["results"] + "{reads}" + config["suffix"]["reads_fwd"] + "_sickle_pe_q" + config["sickle"]["threshold"] + ".fastq", \
            reverse = config["dir"]["results"] + "{reads}" + config["suffix"]["reads_rev"] + "_sickle_pe_q" + config["sickle"]["threshold"] + ".fastq", \
            single = config["dir"]["results"] + "{reads}_single_sickle_pe_q" + config["sickle"]["threshold"] + ".fastq", \
            summary = config["dir"]["results"] + "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_summary.txt"
    params: threshold = config["sickle"]["threshold"], \
            qual_type=config["sickle"]["qual_type"], \
            options = config["sickle"]["other_options"], \
            qsub = config["qsub"] \
            + " -e " + config["dir"]["results"] + "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_qsub.err" \
            + " -o " + config["dir"]["results"] + "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_qsub.out"
    log: config["dir"]["results"] + "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + ".log"
    benchmark: config["dir"]["results"] + "{reads}_sickle_pe_q" + config["sickle"]["threshold"] + "_benchmark.json"
    message: "Trimming paired-ends raw reads with sickle\n\tInput:\t{input}\n\tOutput:\t{output}\n\tLog:\t{log}"
    shell: "sickle pe --pe-file1 {input.forward} --pe-file2 {input.reverse} --qual-type {params.qual_type} --qual-threshold {params.threshold} --output-pe1 {output.forward} --output-pe2 {output.reverse} --output-single {output.single} {params.options} > {output.summary} 2> {log}"






# rule trimming_paired_end:
#     """Trim all raw paired-end read files (fastq.gz format) using sickle.
#     The forward and the reverse read files have to be named respectively '{data_dir}_1.fastq.gz' and '{data_dir}_2.fastq.gz'.
#     The quality threshold (threshold) and the quality type (seq_type) parameters have to be determined in the config file (json format) linked in the snakefile (workflow).
#     You can add any other wanted parameters in the "other options" of the config file.
#     The result files are named '{data_dir}_1_trimmed.fastq.gz', '{reads}_2_trimmed.fastq.gz' and '{data_dir}_trimmed.fastq.gz'.
#     """
    
#     input: "{data_dir}/{data_dir}_1.fastq.gz", "{data_dir}/{data_dir}_2.fastq.gz"
#     output: forward = "{data_dir}/{data_dir}_1_trimmed_thr" + config["sickle"]["threshold"] + ".fastq.gz", \
#             reverse = "{data_dir}/{data_dir}_2_trimmed_thr" + config["sickle"]["threshold"] + ".fastq.gz", \
#             single = "{data_dir}/{data_dir}_trimmed_thr" + config["sickle"]["threshold"] + ".fastq.gz"
#     params: threshold = config["sickle"]["threshold"], seq_type=config["sickle"]["seq_type"], qsub=config["qsub"] + " -q long -e {data_dir}/{data_dir}_trim_qsub.err -o {data_dir}/{data_dir}_trim_qsub.out", options = config["sickle"]["other_options"]
#     log: "{data_dir}/{data_dir}_trimmed_thr" + config["sickle"]["threshold"] + ".log"
#     benchmark: "{data_dir}/{data_dir}_trimmed_benchmark_thr" + config["sickle"]["threshold"] + ".json"
#     # message: "Trimming raw reads with sickle\n\tInput:\t{input}\n\tOutput:\t{output}\n\tLog:\t{log}"
#     shell: "sickle pe --gzip-output --pe-file1 {input[0]} --pe-file2 {input[1]} --qual-type {params.seq_type} --qual-threshold {params.threshold} --output-pe1 {output[0]} --output-pe2 {output[1]} --output-single {output[2]} {params.options} 2> {log}"


